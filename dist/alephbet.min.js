!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.AlephBet=t():e.AlephBet=t()}(self,(function(){return(()=>{var t={632:(e,t,n)=>{var i;!function(){var r=function(e){return r.utils.extend({},r.plugins,(new r.Storage).init(e))};r.version="0.4.11",r.utils={extend:function(){for(var e="object"==typeof arguments[0]?arguments[0]:{},t=1;t<arguments.length;t++)if(arguments[t]&&"object"==typeof arguments[t])for(var n in arguments[t])e[n]=arguments[t][n];return e},each:function(e,t,n){if(this.isArray(e)){for(var i=0;i<e.length;i++)if(!1===t.call(n,e[i],i))return}else if(e)for(var r in e)if(!1===t.call(n,e[r],r))return},tryEach:function(e,t,n,i){this.each(e,(function(e,r){try{return t.call(i,e,r)}catch(t){if(this.isFunction(n))try{n.call(i,e,r,t)}catch(e){}}}),this)},registerPlugin:function(e){r.plugins=this.extend(e,r.plugins)},getTypeOf:function(e){return null==e?""+e:Object.prototype.toString.call(e).replace(/^\[object\s(.*)\]$/,(function(e,t){return t.toLowerCase()}))}};for(var o=["Arguments","Boolean","Function","String","Array","Number","Date","RegExp","Undefined","Null"],a=0;a<o.length;a++)r.utils["is"+o[a]]=function(e){return function(t){return r.utils.getTypeOf(t)===e.toLowerCase()}}(o[a]);r.plugins={},r.options=r.utils.extend({namespace:"b45i1",storages:["local","cookie","session","memory"],expireDays:365,keyDelimiter:"."},window.Basil?window.Basil.options:{}),r.Storage=function(){var e="b45i1"+(Math.random()+1).toString(36).substring(7),t={},n=function(e){var t=r.utils.getTypeOf(e);return"string"===t&&e||"number"===t||"boolean"===t},i=function(e){return r.utils.isArray(e)?e:r.utils.isString(e)?[e]:[]},o=function(e,t,i){var o="";return n(t)?o+=t:r.utils.isArray(t)&&(o=(t=r.utils.isFunction(t.filter)?t.filter(n):t).join(i)),o&&n(e)?e+i+o:o},a=function(e,t,i){return n(e)?t.replace(new RegExp("^"+e+i),""):t},u={engine:null,check:function(){try{window[this.engine].setItem(e,!0),window[this.engine].removeItem(e)}catch(e){return!1}return!0},set:function(e,t,n){if(!e)throw Error("invalid key");window[this.engine].setItem(e,t)},get:function(e){return window[this.engine].getItem(e)},remove:function(e){window[this.engine].removeItem(e)},reset:function(e){for(var t,n=0;n<window[this.engine].length;n++)t=window[this.engine].key(n),e&&0!==t.indexOf(e)||(this.remove(t),n--)},keys:function(e,t){for(var n,i=[],r=0;r<window[this.engine].length;r++)n=window[this.engine].key(r),e&&0!==n.indexOf(e)||i.push(a(e,n,t));return i}};return t.local=r.utils.extend({},u,{engine:"localStorage"}),t.session=r.utils.extend({},u,{engine:"sessionStorage"}),t.memory={_hash:{},check:function(){return!0},set:function(e,t,n){if(!e)throw Error("invalid key");this._hash[e]=t},get:function(e){return this._hash[e]||null},remove:function(e){delete this._hash[e]},reset:function(e){for(var t in this._hash)e&&0!==t.indexOf(e)||this.remove(t)},keys:function(e,t){var n=[];for(var i in this._hash)e&&0!==i.indexOf(e)||n.push(a(e,i,t));return n}},t.cookie={check:function(t){if(!navigator.cookieEnabled)return!1;if(window.self!==window.top){var n="thirdparty.check="+Math.round(1e3*Math.random());return document.cookie=n+"; path=/",-1!==document.cookie.indexOf(n)}if(t&&t.secure)try{this.set(e,e,t);var i=this.get(e)===e;return this.remove(e),i}catch(e){return!1}return!0},set:function(e,t,n){if(!this.check())throw Error("cookies are disabled");if(n=n||{},!e)throw Error("invalid key");var i=encodeURIComponent(e)+"="+encodeURIComponent(t);if(n.expireDays){var r=new Date;r.setTime(r.getTime()+24*n.expireDays*60*60*1e3),i+="; expires="+r.toGMTString()}if(n.domain&&n.domain!==document.domain){var o=n.domain.replace(/^\./,"");if(-1===document.domain.indexOf(o)||o.split(".").length<=1)throw Error("invalid domain");i+="; domain="+n.domain}n.sameSite&&["lax","strict","none"].includes(n.sameSite.toLowerCase())&&(i+="; SameSite="+n.sameSite),!0===n.secure&&(i+="; Secure"),document.cookie=i+"; path=/"},get:function(e){if(!this.check())throw Error("cookies are disabled");for(var t,n=encodeURIComponent(e),i=document.cookie?document.cookie.split(";"):[],r=i.length-1;r>=0;r--)if(0===(t=i[r].replace(/^\s*/,"")).indexOf(n+"="))return decodeURIComponent(t.substring(n.length+1,t.length));return null},remove:function(e){this.set(e,"",{expireDays:-1});for(var t=document.domain.split("."),n=t.length;n>1;n--)this.set(e,"",{expireDays:-1,domain:"."+t.slice(-n).join(".")})},reset:function(e){for(var t,n,i=document.cookie?document.cookie.split(";"):[],r=0;r<i.length;r++)n=(t=i[r].replace(/^\s*/,"")).substr(0,t.indexOf("=")),e&&0!==n.indexOf(e)||this.remove(n)},keys:function(e,t){if(!this.check())throw Error("cookies are disabled");for(var n,i,r=[],o=document.cookie?document.cookie.split(";"):[],u=0;u<o.length;u++)n=o[u].replace(/^\s*/,""),i=decodeURIComponent(n.substr(0,n.indexOf("="))),e&&0!==i.indexOf(e)||r.push(a(e,i,t));return r}},{init:function(e){return this.setOptions(e),this},setOptions:function(e){this.options=r.utils.extend({},this.options||r.options,e)},support:function(e){return t.hasOwnProperty(e)},check:function(e){return!!this.support(e)&&t[e].check(this.options)},set:function(e,n,a){if(a=r.utils.extend({},this.options,a),!(e=o(a.namespace,e,a.keyDelimiter)))return!1;n=!0===a.raw?n:function(e){return JSON.stringify(e)}(n);var u=null;return r.utils.tryEach(i(a.storages),(function(i,r){return t[i].set(e,n,a),u=i,!1}),null,this),!!u&&(r.utils.tryEach(i(a.storages),(function(n,i){n!==u&&t[n].remove(e)}),null,this),!0)},get:function(e,n){if(n=r.utils.extend({},this.options,n),!(e=o(n.namespace,e,n.keyDelimiter)))return null;var a=null;return r.utils.tryEach(i(n.storages),(function(i,r){if(null!==a)return!1;a=t[i].get(e,n)||null,a=!0===n.raw?a:function(e){return e?JSON.parse(e):null}(a)}),(function(e,t,n){a=null}),this),a},remove:function(e,n){n=r.utils.extend({},this.options,n),(e=o(n.namespace,e,n.keyDelimiter))&&r.utils.tryEach(i(n.storages),(function(n){t[n].remove(e)}),null,this)},reset:function(e){e=r.utils.extend({},this.options,e),r.utils.tryEach(i(e.storages),(function(n){t[n].reset(e.namespace)}),null,this)},keys:function(e){e=e||{};var t=[];for(var n in this.keysMap(e))t.push(n);return t},keysMap:function(e){e=r.utils.extend({},this.options,e);var n={};return r.utils.tryEach(i(e.storages),(function(i){r.utils.each(t[i].keys(e.namespace,e.keyDelimiter),(function(e){n[e]=r.utils.isArray(n[e])?n[e]:[],n[e].push(i)}),this)}),null,this),n}}},r.memory=(new r.Storage).init({storages:"memory",namespace:null,raw:!0}),r.cookie=(new r.Storage).init({storages:"cookie",namespace:null,raw:!0}),r.localStorage=(new r.Storage).init({storages:"local",namespace:null,raw:!0}),r.sessionStorage=(new r.Storage).init({storages:"session",namespace:null,raw:!0}),window.Basil=r,void 0===(i=function(){return r}.call(t,n,t,e))||(e.exports=i)}()},2:function(e,t,n){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var a,u,s;s=n(581),u=n(757),a=function(){var e=function e(){o(this,e)};return e.GimelAdapter=function(){var t=function(){function t(n,i){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.LocalStorageAdapter;o(this,t),this._storage=r,this.url=n,this.namespace=i,this._queue=JSON.parse(this._storage.get(this.queue_name)||"[]"),this._flush()}return r(t,[{key:"_remove_quuid",value:function(e){var t=this;return function(n,i){if(!n)return s.remove(t._queue,(function(t){return t.properties._quuid===e})),t._storage.set(t.queue_name,JSON.stringify(t._queue))}}},{key:"_jquery_get",value:function(e,t,n){return s.log("send request using jQuery"),window.jQuery.ajax({method:"GET",url:e,data:t,success:n})}},{key:"_plain_js_get",value:function(e,t,n){var i,r,o,a;return s.log("fallback on plain js xhr"),a=new XMLHttpRequest,r=(r=function(){var e;for(i in e=[],t)o=t[i],e.push("".concat(encodeURIComponent(i),"=").concat(encodeURIComponent(o)));return e}()).join("&").replace(/%20/g,"+"),a.open("GET","".concat(e,"?").concat(r)),a.onload=function(){if(200===a.status)return n()},a.send()}},{key:"_ajax_get",value:function(e,t,n){var i;return(null!=(i=window.jQuery)?i.ajax:void 0)?this._jquery_get(e,t,n):this._plain_js_get(e,t,n)}},{key:"_flush",value:function(){var e,t,n,i,r,o;for(o=[],t=0,i=(r=this._queue).length;t<i;t++)n=r[t],e=this._remove_quuid(n.properties._quuid),this._ajax_get(this.url,s.omit(n.properties,"_quuid"),e),o.push(null);return o}},{key:"_user_uuid",value:function(e,t){return e.user_id&&t.unique?s.sha1("".concat(this.namespace,".").concat(e.name,".").concat(e.user_id)):s.uuid()}},{key:"_track",value:function(e,t,n){return s.log("Persistent Queue Gimel track: ".concat(this.namespace,", ").concat(e.name,", ").concat(t,", ").concat(n.name)),this._queue.length>100&&this._queue.shift(),this._queue.push({properties:{experiment:e.name,_quuid:s.uuid(),uuid:this._user_uuid(e,n),variant:t,event:n.name,namespace:this.namespace}}),this._storage.set(this.queue_name,JSON.stringify(this._queue)),this._flush()}},{key:"experiment_start",value:function(e,t){return this._track(e,t,{name:"participate",unique:!0})}},{key:"goal_complete",value:function(e,t,n,i){return this._track(e,t,s.defaults({name:n},i))}}]),t}();return t.prototype.queue_name="_gimel_queue",t}.call(this),e.PersistentQueueGoogleAnalyticsAdapter=function(){var t=function(){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.LocalStorageAdapter;o(this,t),this._storage=n,this._queue=JSON.parse(this._storage.get(this.queue_name)||"[]"),this._flush()}return r(t,[{key:"_remove_uuid",value:function(e){var t=this;return function(){return s.remove(t._queue,(function(t){return t.uuid===e})),t._storage.set(t.queue_name,JSON.stringify(t._queue))}}},{key:"_flush",value:function(){var e,t,n,i,r,o;if("function"!=typeof ga)throw new Error("ga not defined. Please make sure your Universal analytics is set up correctly");for(o=[],t=0,i=(r=this._queue).length;t<i;t++)n=r[t],e=this._remove_uuid(n.uuid),o.push(ga("send","event",n.category,n.action,n.label,{hitCallback:e,nonInteraction:1}));return o}},{key:"_track",value:function(e,t,n){return s.log("Persistent Queue Google Universal Analytics track: ".concat(e,", ").concat(t,", ").concat(n)),this._queue.length>100&&this._queue.shift(),this._queue.push({uuid:s.uuid(),category:e,action:t,label:n}),this._storage.set(this.queue_name,JSON.stringify(this._queue)),this._flush()}},{key:"experiment_start",value:function(e,t){return this._track(this.namespace,"".concat(e.name," | ").concat(t),"Visitors")}},{key:"goal_complete",value:function(e,t,n,i){return this._track(this.namespace,"".concat(e.name," | ").concat(t),n)}}]),t}();return t.prototype.namespace="alephbet",t.prototype.queue_name="_ga_queue",t}.call(this),e.PersistentQueueKeenAdapter=function(){var t=function(){function t(n){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.LocalStorageAdapter;o(this,t),this.client=n,this._storage=i,this._queue=JSON.parse(this._storage.get(this.queue_name)||"[]"),this._flush()}return r(t,[{key:"_remove_quuid",value:function(e){var t=this;return function(n,i){if(!n)return s.remove(t._queue,(function(t){return t.properties._quuid===e})),t._storage.set(t.queue_name,JSON.stringify(t._queue))}}},{key:"_flush",value:function(){var e,t,n,i,r,o;for(o=[],t=0,i=(r=this._queue).length;t<i;t++)n=r[t],e=this._remove_quuid(n.properties._quuid),o.push(this.client.addEvent(n.experiment_name,s.omit(n.properties,"_quuid"),e));return o}},{key:"_user_uuid",value:function(e,t){return e.user_id&&t.unique?s.sha1("".concat(this.namespace,".").concat(e.name,".").concat(e.user_id)):s.uuid()}},{key:"_track",value:function(e,t,n){return s.log("Persistent Queue Keen track: ".concat(e.name,", ").concat(t,", ").concat(n.name)),this._queue.length>100&&this._queue.shift(),this._queue.push({experiment_name:e.name,properties:{_quuid:s.uuid(),uuid:this._user_uuid(e,n),variant:t,event:n.name}}),this._storage.set(this.queue_name,JSON.stringify(this._queue)),this._flush()}},{key:"experiment_start",value:function(e,t){return this._track(e,t,{name:"participate",unique:!0})}},{key:"goal_complete",value:function(e,t,n,i){return this._track(e,t,s.defaults({name:n},i))}}]),t}();return t.prototype.queue_name="_keen_queue",t}.call(this),e.GoogleUniversalAnalyticsAdapter=function(){var e=function(){function e(){o(this,e)}return r(e,null,[{key:"_track",value:function(e,t,n){if(s.log("Google Universal Analytics track: ".concat(e,", ").concat(t,", ").concat(n)),"function"!=typeof ga)throw new Error("ga not defined. Please make sure your Universal analytics is set up correctly");return ga("send","event",e,t,n,{nonInteraction:1})}},{key:"experiment_start",value:function(e,t){return this._track(this.namespace,"".concat(e.name," | ").concat(t),"Visitors")}},{key:"goal_complete",value:function(e,t,n,i){return this._track(this.namespace,"".concat(e.name," | ").concat(t),n)}}]),e}();return e.namespace="alephbet",e}.call(this),e.LocalStorageAdapter=function(){var e=function(){function e(){o(this,e)}return r(e,null,[{key:"set",value:function(e,t){return new u(this.namespace).set(e,t)}},{key:"get",value:function(e){return new u(this.namespace).get(e)}}]),e}();return e.namespace="alephbet",e}.call(this),e}.call(this),e.exports=a},14:function(e,t,n){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var a,u,s,c;c=n(581),u=n(2),s=n(901),a=function(){var e=function e(){o(this,e)};return e.options=s,e.utils=c,e.GimelAdapter=u.GimelAdapter,e.PersistentQueueGoogleAnalyticsAdapter=u.PersistentQueueGoogleAnalyticsAdapter,e.PersistentQueueKeenAdapter=u.PersistentQueueKeenAdapter,e.Experiment=function(){var e,t,n=function(){function n(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};o(this,n),this.options=i,c.defaults(this.options,n._options),t.call(this),this.name=this.options.name,this.variants=this.options.variants,this.user_id=this.options.user_id,this.variant_names=c.keys(this.variants),e.call(this)}return r(n,[{key:"run",value:function(){var e;return c.log("running with options: ".concat(JSON.stringify(this.options))),(e=this.get_stored_variant())?(c.log("".concat(e," active")),this.activate_variant(e)):this.conditionally_activate_variant()}},{key:"activate_variant",value:function(e){var t;return null!=(t=this.variants[e])&&t.activate(this),this.storage().set("".concat(this.options.name,":variant"),e)}},{key:"conditionally_activate_variant",value:function(){var e;if(this.options.trigger()&&(c.log("trigger set"),this.in_sample()))return c.log("in sample"),e=this.pick_variant(),this.tracking().experiment_start(this,e),this.activate_variant(e)}},{key:"goal_complete",value:function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(c.defaults(n,{unique:!0}),(!n.unique||!this.storage().get("".concat(this.options.name,":").concat(e)))&&(t=this.get_stored_variant()))return n.unique&&this.storage().set("".concat(this.options.name,":").concat(e),!0),c.log("experiment: ".concat(this.options.name," variant:").concat(t," goal:").concat(e," complete")),this.tracking().goal_complete(this,t,e,n)}},{key:"get_stored_variant",value:function(){return this.storage().get("".concat(this.options.name,":variant"))}},{key:"pick_variant",value:function(){var e;return e=c.check_weights(this.variants),c.log("all variants have weights: ".concat(e)),e?this.pick_weighted_variant():this.pick_unweighted_variant()}},{key:"pick_weighted_variant",value:function(){var e,t,n,i;for(e in i=c.sum_weights(this.variants),n=Math.ceil(this._random("variant")*i),t=this.variants)if((n-=t[e].weight)<=0)return e}},{key:"pick_unweighted_variant",value:function(){var e,t,n;return t=1/this.variant_names.length,e=Math.floor(this._random("variant")/t),n=this.variant_names[e],c.log("".concat(n," picked")),n}},{key:"in_sample",value:function(){var e;return void 0!==(e=this.storage().get("".concat(this.options.name,":in_sample")))||(e=this._random("sample")<=this.options.sample,this.storage().set("".concat(this.options.name,":in_sample"),e)),e}},{key:"_random",value:function(e){var t;return this.user_id?(t="".concat(this.name,".").concat(e,".").concat(this.user_id),c.random(t)):c.random()}},{key:"add_goal",value:function(e){return e.add_experiment(this)}},{key:"add_goals",value:function(e){var t,n,i,r;for(r=[],n=0,i=e.length;n<i;n++)t=e[n],r.push(this.add_goal(t));return r}},{key:"storage",value:function(){return this.options.storage_adapter}},{key:"tracking",value:function(){return this.options.tracking_adapter}}]),n}();return n._options={name:null,variants:null,user_id:null,sample:1,trigger:function(){return!0},tracking_adapter:u.GoogleUniversalAnalyticsAdapter,storage_adapter:u.LocalStorageAdapter},e=function(){return this.run()},t=function(){if(null===this.options.name)throw new Error("an experiment name must be specified");if(null===this.options.variants)throw new Error("variants must be provided");if("function"!=typeof this.options.trigger)throw new Error("trigger must be a function");if(!c.validate_weights(this.options.variants))throw new Error("not all variants have weights")},n}.call(this),e.Goal=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};o(this,e),this.name=t,this.props=n,c.defaults(this.props,{unique:!0}),this.experiments=[]}return r(e,[{key:"add_experiment",value:function(e){return this.experiments.push(e)}},{key:"add_experiments",value:function(e){var t,n,i,r;for(r=[],n=0,i=e.length;n<i;n++)t=e[n],r.push(this.add_experiment(t));return r}},{key:"complete",value:function(){var e,t,n,i,r;for(r=[],t=0,n=(i=this.experiments).length;t<n;t++)e=i[t],r.push(e.goal_complete(this.name,this.props));return r}}]),e}(),e}.call(this),e.exports=a},901:e=>{e.exports={debug:!1}},757:(e,t,n)=>{function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var o,a,u;o=n(632),u=new o({namespace:null}),a=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"alephbet";i(this,e),this.namespace=t,this.storage=u.get(this.namespace)||{}}var t,n;return t=e,(n=[{key:"set",value:function(e,t){return this.storage[e]=t,u.set(this.namespace,this.storage),t}},{key:"get",value:function(e){return this.storage[e]}}])&&r(t.prototype,n),e}(),e.exports=a},581:(t,n,i)=>{"use strict";i.r(n);var r={};i.r(r);var o="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),a=new Uint8Array(16);function u(){if(!o)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return o(a)}const s=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,c=function(e){return"string"==typeof e&&s.test(e)};for(var l=[],h=0;h<256;++h)l.push((h+256).toString(16).substr(1));const f=function(e,t,n){var i=(e=e||{}).random||(e.rng||u)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,t){n=n||0;for(var r=0;r<16;++r)t[n+r]=i[r];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(l[e[t+0]]+l[e[t+1]]+l[e[t+2]]+l[e[t+3]]+"-"+l[e[t+4]]+l[e[t+5]]+"-"+l[e[t+6]]+l[e[t+7]]+"-"+l[e[t+8]]+l[e[t+9]]+"-"+l[e[t+10]]+l[e[t+11]]+l[e[t+12]]+l[e[t+13]]+l[e[t+14]]+l[e[t+15]]).toLowerCase();if(!c(n))throw TypeError("Stringified UUID is invalid");return n}(i)};function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){v(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function g(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var m,y;t=i.hmd(t),y=i(901),m=function(){var t=function(){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,i;return n=t,i=[{key:"defaults",value:function(e,t){var n,i;for(n in t)i=t[n],void 0===e[n]&&(e[n]=i);return e}},{key:"remove",value:function(t,n){var i;return i=-1,t.some((function(t,r){return n(e,r)&&(i=r),i>-1})),i>-1?t.splice(i,1):[]}},{key:"omit",value:function(e){var t,n,i,r;r=d({},e);for(var o=arguments.length,a=new Array(o>1?o-1:0),u=1;u<o;u++)a[u-1]=arguments[u];for(t=0,n=(i=[].concat.apply([],a)).length;t<n;t++)delete r[i[t]];return r}},{key:"log",value:function(e){if(y.debug)return console.log(e)}},{key:"sha1",value:function(e){return(0,r.sha1)(e).toString()}},{key:"random",value:function(e){return e?parseInt(this.sha1(e).substr(0,13),16)/0xfffffffffffff:Math.random()}},{key:"check_weights",value:function(e){var t,n,i;for(n in t=[],e)i=e[n],t.push(null!=i.weight);return t.every((function(e){return e}))}},{key:"sum_weights",value:function(e){var t,n;for(t in n=0,e)n+=e[t].weight||0;return n}},{key:"validate_weights",value:function(e){var t,n,i;for(n in t=[],e)i=e[n],t.push(null!=i.weight);return t.every((function(e){return e||t.every((function(e){return!e}))}))}}],null&&g(n.prototype,null),i&&g(n,i),t}();return t.keys=Object.keys,t.uuid=f,t}.call(void 0),t.exports=m}},n={};function i(e){if(n[e])return n[e].exports;var r=n[e]={id:e,loaded:!1,exports:{}};return t[e].call(r.exports,r,r.exports,i),r.loaded=!0,r.exports}return i.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i(14)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,