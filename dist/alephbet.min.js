!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.AlephBet=t():e.AlephBet=t()}(self,(function(){return(()=>{var t={632:(e,t,n)=>{var r;!function(){var i=function(e){return i.utils.extend({},i.plugins,(new i.Storage).init(e))};i.version="0.4.11",i.utils={extend:function(){for(var e="object"==typeof arguments[0]?arguments[0]:{},t=1;t<arguments.length;t++)if(arguments[t]&&"object"==typeof arguments[t])for(var n in arguments[t])e[n]=arguments[t][n];return e},each:function(e,t,n){if(this.isArray(e)){for(var r=0;r<e.length;r++)if(!1===t.call(n,e[r],r))return}else if(e)for(var i in e)if(!1===t.call(n,e[i],i))return},tryEach:function(e,t,n,r){this.each(e,(function(e,i){try{return t.call(r,e,i)}catch(t){if(this.isFunction(n))try{n.call(r,e,i,t)}catch(e){}}}),this)},registerPlugin:function(e){i.plugins=this.extend(e,i.plugins)},getTypeOf:function(e){return null==e?""+e:Object.prototype.toString.call(e).replace(/^\[object\s(.*)\]$/,(function(e,t){return t.toLowerCase()}))}};for(var o=["Arguments","Boolean","Function","String","Array","Number","Date","RegExp","Undefined","Null"],a=0;a<o.length;a++)i.utils["is"+o[a]]=function(e){return function(t){return i.utils.getTypeOf(t)===e.toLowerCase()}}(o[a]);i.plugins={},i.options=i.utils.extend({namespace:"b45i1",storages:["local","cookie","session","memory"],expireDays:365,keyDelimiter:"."},window.Basil?window.Basil.options:{}),i.Storage=function(){var e="b45i1"+(Math.random()+1).toString(36).substring(7),t={},n=function(e){var t=i.utils.getTypeOf(e);return"string"===t&&e||"number"===t||"boolean"===t},r=function(e){return i.utils.isArray(e)?e:i.utils.isString(e)?[e]:[]},o=function(e,t,r){var o="";return n(t)?o+=t:i.utils.isArray(t)&&(o=(t=i.utils.isFunction(t.filter)?t.filter(n):t).join(r)),o&&n(e)?e+r+o:o},a=function(e,t,r){return n(e)?t.replace(new RegExp("^"+e+r),""):t},u={engine:null,check:function(){try{window[this.engine].setItem(e,!0),window[this.engine].removeItem(e)}catch(e){return!1}return!0},set:function(e,t,n){if(!e)throw Error("invalid key");window[this.engine].setItem(e,t)},get:function(e){return window[this.engine].getItem(e)},remove:function(e){window[this.engine].removeItem(e)},reset:function(e){for(var t,n=0;n<window[this.engine].length;n++)t=window[this.engine].key(n),e&&0!==t.indexOf(e)||(this.remove(t),n--)},keys:function(e,t){for(var n,r=[],i=0;i<window[this.engine].length;i++)n=window[this.engine].key(i),e&&0!==n.indexOf(e)||r.push(a(e,n,t));return r}};return t.local=i.utils.extend({},u,{engine:"localStorage"}),t.session=i.utils.extend({},u,{engine:"sessionStorage"}),t.memory={_hash:{},check:function(){return!0},set:function(e,t,n){if(!e)throw Error("invalid key");this._hash[e]=t},get:function(e){return this._hash[e]||null},remove:function(e){delete this._hash[e]},reset:function(e){for(var t in this._hash)e&&0!==t.indexOf(e)||this.remove(t)},keys:function(e,t){var n=[];for(var r in this._hash)e&&0!==r.indexOf(e)||n.push(a(e,r,t));return n}},t.cookie={check:function(t){if(!navigator.cookieEnabled)return!1;if(window.self!==window.top){var n="thirdparty.check="+Math.round(1e3*Math.random());return document.cookie=n+"; path=/",-1!==document.cookie.indexOf(n)}if(t&&t.secure)try{this.set(e,e,t);var r=this.get(e)===e;return this.remove(e),r}catch(e){return!1}return!0},set:function(e,t,n){if(!this.check())throw Error("cookies are disabled");if(n=n||{},!e)throw Error("invalid key");var r=encodeURIComponent(e)+"="+encodeURIComponent(t);if(n.expireDays){var i=new Date;i.setTime(i.getTime()+24*n.expireDays*60*60*1e3),r+="; expires="+i.toGMTString()}if(n.domain&&n.domain!==document.domain){var o=n.domain.replace(/^\./,"");if(-1===document.domain.indexOf(o)||o.split(".").length<=1)throw Error("invalid domain");r+="; domain="+n.domain}n.sameSite&&["lax","strict","none"].includes(n.sameSite.toLowerCase())&&(r+="; SameSite="+n.sameSite),!0===n.secure&&(r+="; Secure"),document.cookie=r+"; path=/"},get:function(e){if(!this.check())throw Error("cookies are disabled");for(var t,n=encodeURIComponent(e),r=document.cookie?document.cookie.split(";"):[],i=r.length-1;i>=0;i--)if(0===(t=r[i].replace(/^\s*/,"")).indexOf(n+"="))return decodeURIComponent(t.substring(n.length+1,t.length));return null},remove:function(e){this.set(e,"",{expireDays:-1});for(var t=document.domain.split("."),n=t.length;n>1;n--)this.set(e,"",{expireDays:-1,domain:"."+t.slice(-n).join(".")})},reset:function(e){for(var t,n,r=document.cookie?document.cookie.split(";"):[],i=0;i<r.length;i++)n=(t=r[i].replace(/^\s*/,"")).substr(0,t.indexOf("=")),e&&0!==n.indexOf(e)||this.remove(n)},keys:function(e,t){if(!this.check())throw Error("cookies are disabled");for(var n,r,i=[],o=document.cookie?document.cookie.split(";"):[],u=0;u<o.length;u++)n=o[u].replace(/^\s*/,""),r=decodeURIComponent(n.substr(0,n.indexOf("="))),e&&0!==r.indexOf(e)||i.push(a(e,r,t));return i}},{init:function(e){return this.setOptions(e),this},setOptions:function(e){this.options=i.utils.extend({},this.options||i.options,e)},support:function(e){return t.hasOwnProperty(e)},check:function(e){return!!this.support(e)&&t[e].check(this.options)},set:function(e,n,a){if(a=i.utils.extend({},this.options,a),!(e=o(a.namespace,e,a.keyDelimiter)))return!1;n=!0===a.raw?n:function(e){return JSON.stringify(e)}(n);var u=null;return i.utils.tryEach(r(a.storages),(function(r,i){return t[r].set(e,n,a),u=r,!1}),null,this),!!u&&(i.utils.tryEach(r(a.storages),(function(n,r){n!==u&&t[n].remove(e)}),null,this),!0)},get:function(e,n){if(n=i.utils.extend({},this.options,n),!(e=o(n.namespace,e,n.keyDelimiter)))return null;var a=null;return i.utils.tryEach(r(n.storages),(function(r,i){if(null!==a)return!1;a=t[r].get(e,n)||null,a=!0===n.raw?a:function(e){return e?JSON.parse(e):null}(a)}),(function(e,t,n){a=null}),this),a},remove:function(e,n){n=i.utils.extend({},this.options,n),(e=o(n.namespace,e,n.keyDelimiter))&&i.utils.tryEach(r(n.storages),(function(n){t[n].remove(e)}),null,this)},reset:function(e){e=i.utils.extend({},this.options,e),i.utils.tryEach(r(e.storages),(function(n){t[n].reset(e.namespace)}),null,this)},keys:function(e){e=e||{};var t=[];for(var n in this.keysMap(e))t.push(n);return t},keysMap:function(e){e=i.utils.extend({},this.options,e);var n={};return i.utils.tryEach(r(e.storages),(function(r){i.utils.each(t[r].keys(e.namespace,e.keyDelimiter),(function(e){n[e]=i.utils.isArray(n[e])?n[e]:[],n[e].push(r)}),this)}),null,this),n}}},i.memory=(new i.Storage).init({storages:"memory",namespace:null,raw:!0}),i.cookie=(new i.Storage).init({storages:"cookie",namespace:null,raw:!0}),i.localStorage=(new i.Storage).init({storages:"local",namespace:null,raw:!0}),i.sessionStorage=(new i.Storage).init({storages:"session",namespace:null,raw:!0}),window.Basil=i,void 0===(r=function(){return i}.call(t,n,t,e))||(e.exports=r)}()},487:e=>{var t={utf8:{stringToBytes:function(e){return t.bin.stringToBytes(unescape(encodeURIComponent(e)))},bytesToString:function(e){return decodeURIComponent(escape(t.bin.bytesToString(e)))}},bin:{stringToBytes:function(e){for(var t=[],n=0;n<e.length;n++)t.push(255&e.charCodeAt(n));return t},bytesToString:function(e){for(var t=[],n=0;n<e.length;n++)t.push(String.fromCharCode(e[n]));return t.join("")}}};e.exports=t},2:function(e,t,n){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var a,u,s;s=n(60),u=n(757),a=function(){var e=function e(){o(this,e)};return e.GimelAdapter=function(){var t=function(){function t(n,r){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.LocalStorageAdapter;o(this,t),this._storage=i,this.url=n,this.namespace=r,this._queue=JSON.parse(this._storage.get(this.queue_name)||"[]"),this._flush()}return i(t,[{key:"_remove_quuid",value:function(e){var t=this;return function(n,r){if(!n)return s.remove(t._queue,(function(t){return t.properties._quuid===e})),t._storage.set(t.queue_name,JSON.stringify(t._queue))}}},{key:"_jquery_get",value:function(e,t,n){return s.log("send request using jQuery"),window.jQuery.ajax({method:"GET",url:e,data:t,success:n})}},{key:"_plain_js_get",value:function(e,t,n){var r,i,o,a;return s.log("fallback on plain js xhr"),a=new XMLHttpRequest,i=(i=function(){var e;for(r in e=[],t)o=t[r],e.push("".concat(encodeURIComponent(r),"=").concat(encodeURIComponent(o)));return e}()).join("&").replace(/%20/g,"+"),a.open("GET","".concat(e,"?").concat(i)),a.onload=function(){if(200===a.status)return n()},a.send()}},{key:"_ajax_get",value:function(e,t,n){var r;return(null!=(r=window.jQuery)?r.ajax:void 0)?this._jquery_get(e,t,n):this._plain_js_get(e,t,n)}},{key:"_flush",value:function(){var e,t,n,r,i,o;for(o=[],t=0,r=(i=this._queue).length;t<r;t++)n=i[t],e=this._remove_quuid(n.properties._quuid),this._ajax_get(this.url,s.omit(n.properties,"_quuid"),e),o.push(null);return o}},{key:"_user_uuid",value:function(e,t){return e.user_id&&t.unique?s.sha1("".concat(this.namespace,".").concat(e.name,".").concat(e.user_id)):s.uuid()}},{key:"_track",value:function(e,t,n){return s.log("Persistent Queue Gimel track: ".concat(this.namespace,", ").concat(e.name,", ").concat(t,", ").concat(n.name)),this._queue.length>100&&this._queue.shift(),this._queue.push({properties:{experiment:e.name,_quuid:s.uuid(),uuid:this._user_uuid(e,n),variant:t,event:n.name,namespace:this.namespace}}),this._storage.set(this.queue_name,JSON.stringify(this._queue)),this._flush()}},{key:"experiment_start",value:function(e,t){return this._track(e,t,{name:"participate",unique:!0})}},{key:"goal_complete",value:function(e,t,n,r){return this._track(e,t,s.defaults({name:n},r))}}]),t}();return t.prototype.queue_name="_gimel_queue",t}.call(this),e.PersistentQueueGoogleAnalyticsAdapter=function(){var t=function(){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.LocalStorageAdapter;o(this,t),this._storage=n,this._queue=JSON.parse(this._storage.get(this.queue_name)||"[]"),this._flush()}return i(t,[{key:"_remove_uuid",value:function(e){var t=this;return function(){return s.remove(t._queue,(function(t){return t.uuid===e})),t._storage.set(t.queue_name,JSON.stringify(t._queue))}}},{key:"_flush",value:function(){var e,t,n,r,i,o;if("function"!=typeof ga)throw new Error("ga not defined. Please make sure your Universal analytics is set up correctly");for(o=[],t=0,r=(i=this._queue).length;t<r;t++)n=i[t],e=this._remove_uuid(n.uuid),o.push(ga("send","event",n.category,n.action,n.label,{hitCallback:e,nonInteraction:1}));return o}},{key:"_track",value:function(e,t,n){return s.log("Persistent Queue Google Universal Analytics track: ".concat(e,", ").concat(t,", ").concat(n)),this._queue.length>100&&this._queue.shift(),this._queue.push({uuid:s.uuid(),category:e,action:t,label:n}),this._storage.set(this.queue_name,JSON.stringify(this._queue)),this._flush()}},{key:"experiment_start",value:function(e,t){return this._track(this.namespace,"".concat(e.name," | ").concat(t),"Visitors")}},{key:"goal_complete",value:function(e,t,n,r){return this._track(this.namespace,"".concat(e.name," | ").concat(t),n)}}]),t}();return t.prototype.namespace="alephbet",t.prototype.queue_name="_ga_queue",t}.call(this),e.PersistentQueueKeenAdapter=function(){var t=function(){function t(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.LocalStorageAdapter;o(this,t),this.client=n,this._storage=r,this._queue=JSON.parse(this._storage.get(this.queue_name)||"[]"),this._flush()}return i(t,[{key:"_remove_quuid",value:function(e){var t=this;return function(n,r){if(!n)return s.remove(t._queue,(function(t){return t.properties._quuid===e})),t._storage.set(t.queue_name,JSON.stringify(t._queue))}}},{key:"_flush",value:function(){var e,t,n,r,i,o;for(o=[],t=0,r=(i=this._queue).length;t<r;t++)n=i[t],e=this._remove_quuid(n.properties._quuid),o.push(this.client.addEvent(n.experiment_name,s.omit(n.properties,"_quuid"),e));return o}},{key:"_user_uuid",value:function(e,t){return e.user_id&&t.unique?s.sha1("".concat(this.namespace,".").concat(e.name,".").concat(e.user_id)):s.uuid()}},{key:"_track",value:function(e,t,n){return s.log("Persistent Queue Keen track: ".concat(e.name,", ").concat(t,", ").concat(event)),this._queue.length>100&&this._queue.shift(),this._queue.push({experiment_name:e.name,properties:{_quuid:s.uuid(),uuid:this._user_uuid(e,n),variant:t,event:n.name}}),this._storage.set(this.queue_name,JSON.stringify(this._queue)),this._flush()}},{key:"experiment_start",value:function(e,t){return this._track(e,t,{name:"participate",unique:!0})}},{key:"goal_complete",value:function(e,t,n,r){return this._track(e,t,s.defaults({name:n},r))}}]),t}();return t.prototype.queue_name="_keen_queue",t}.call(this),e.GoogleUniversalAnalyticsAdapter=function(){var e=function(){function e(){o(this,e)}return i(e,null,[{key:"_track",value:function(e,t,n){if(s.log("Google Universal Analytics track: ".concat(e,", ").concat(t,", ").concat(n)),"function"!=typeof ga)throw new Error("ga not defined. Please make sure your Universal analytics is set up correctly");return ga("send","event",e,t,n,{nonInteraction:1})}},{key:"experiment_start",value:function(e,t){return this._track(this.namespace,"".concat(e.name," | ").concat(t),"Visitors")}},{key:"goal_complete",value:function(e,t,n,r){return this._track(this.namespace,"".concat(e.name," | ").concat(t),n)}}]),e}();return e.namespace="alephbet",e}.call(this),e.LocalStorageAdapter=function(){var e=function(){function e(){o(this,e)}return i(e,null,[{key:"set",value:function(e,t){return new u(this.namespace).set(e,t)}},{key:"get",value:function(e){return new u(this.namespace).get(e)}}]),e}();return e.namespace="alephbet",e}.call(this),e}.call(this),e.exports=a},14:function(e,t,n){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function i(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var a,u,s,c;c=n(60),u=n(2),s=n(901),a=function(){var e=function e(){o(this,e)};return e.options=s,e.utils=c,e.GimelAdapter=u.GimelAdapter,e.PersistentQueueGoogleAnalyticsAdapter=u.PersistentQueueGoogleAnalyticsAdapter,e.PersistentQueueKeenAdapter=u.PersistentQueueKeenAdapter,e.Experiment=function(){var e,t,n=function(){function n(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};o(this,n),this.options=r,c.defaults(this.options,n._options),t.call(this),this.name=this.options.name,this.variants=this.options.variants,this.user_id=this.options.user_id,this.variant_names=c.keys(this.variants),e.call(this)}return i(n,[{key:"run",value:function(){var e;return c.log("running with options: ".concat(JSON.stringify(this.options))),(e=this.get_stored_variant())?(c.log("".concat(e," active")),this.activate_variant(e)):this.conditionally_activate_variant()}},{key:"activate_variant",value:function(e){var t;return null!=(t=this.variants[e])&&t.activate(this),this.storage().set("".concat(this.options.name,":variant"),e)}},{key:"conditionally_activate_variant",value:function(){var e;if(this.options.trigger()&&(c.log("trigger set"),this.in_sample()))return c.log("in sample"),e=this.pick_variant(),this.tracking().experiment_start(this,e),this.activate_variant(e)}},{key:"goal_complete",value:function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(c.defaults(n,{unique:!0}),(!n.unique||!this.storage().get("".concat(this.options.name,":").concat(e)))&&(t=this.get_stored_variant()))return n.unique&&this.storage().set("".concat(this.options.name,":").concat(e),!0),c.log("experiment: ".concat(this.options.name," variant:").concat(t," goal:").concat(e," complete")),this.tracking().goal_complete(this,t,e,n)}},{key:"get_stored_variant",value:function(){return this.storage().get("".concat(this.options.name,":variant"))}},{key:"pick_variant",value:function(){var e;return e=c.check_weights(this.variants),c.log("all variants have weights: ".concat(e)),e?this.pick_weighted_variant():this.pick_unweighted_variant()}},{key:"pick_weighted_variant",value:function(){var e,t,n,r;for(e in r=c.sum_weights(this.variants),n=Math.ceil(this._random("variant")*r),t=this.variants)if((n-=t[e].weight)<=0)return e}},{key:"pick_unweighted_variant",value:function(){var e,t,n;return t=1/this.variant_names.length,e=Math.floor(this._random("variant")/t),n=this.variant_names[e],c.log("".concat(n," picked")),n}},{key:"in_sample",value:function(){var e;return void 0!==(e=this.storage().get("".concat(this.options.name,":in_sample")))||(e=this._random("sample")<=this.options.sample,this.storage().set("".concat(this.options.name,":in_sample"),e)),e}},{key:"_random",value:function(e){var t;return this.user_id?(t="".concat(this.name,".").concat(e,".").concat(this.user_id),c.random(t)):c.random()}},{key:"add_goal",value:function(e){return e.add_experiment(this)}},{key:"add_goals",value:function(e){var t,n,r,i;for(i=[],n=0,r=e.length;n<r;n++)t=e[n],i.push(this.add_goal(t));return i}},{key:"storage",value:function(){return this.options.storage_adapter}},{key:"tracking",value:function(){return this.options.tracking_adapter}}]),n}();return n._options={name:null,variants:null,user_id:null,sample:1,trigger:function(){return!0},tracking_adapter:u.GoogleUniversalAnalyticsAdapter,storage_adapter:u.LocalStorageAdapter},e=function(){return this.run()},t=function(){if(null===this.options.name)throw new Error("an experiment name must be specified");if(null===this.options.variants)throw new Error("variants must be provided");if("function"!=typeof this.options.trigger)throw new Error("trigger must be a function");if(!c.validate_weights(this.options.variants))throw new Error("not all variants have weights")},n}.call(this),e.Goal=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};o(this,e),this.name=t,this.props=n,c.defaults(this.props,{unique:!0}),this.experiments=[]}return i(e,[{key:"add_experiment",value:function(e){return this.experiments.push(e)}},{key:"add_experiments",value:function(e){var t,n,r,i;for(i=[],n=0,r=e.length;n<r;n++)t=e[n],i.push(this.add_experiment(t));return i}},{key:"complete",value:function(){var e,t,n,r,i;for(i=[],t=0,n=(r=this.experiments).length;t<n;t++)e=r[t],i.push(e.goal_complete(this.name,this.props));return i}}]),e}(),e}.call(this),e.exports=a},901:e=>{e.exports={debug:!1}},757:(e,t,n)=>{function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o,a,u;o=n(632),u=new o({namespace:null}),a=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"alephbet";r(this,e),this.namespace=t,this.storage=u.get(this.namespace)||{}}var t,n;return t=e,(n=[{key:"set",value:function(e,t){return this.storage[e]=t,u.set(this.namespace,this.storage),t}},{key:"get",value:function(e){return this.storage[e]}}])&&i(t.prototype,n),e}(),e.exports=a},60:(t,n,r)=>{"use strict";r.r(n);var i="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),o=new Uint8Array(16);function a(){if(!i)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return i(o)}const u=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,s=function(e){return"string"==typeof e&&u.test(e)};for(var c=[],l=0;l<256;++l)c.push((l+256).toString(16).substr(1));const f=function(e,t,n){var r=(e=e||{}).random||(e.rng||a)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(var i=0;i<16;++i)t[n+i]=r[i];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(c[e[t+0]]+c[e[t+1]]+c[e[t+2]]+c[e[t+3]]+"-"+c[e[t+4]]+c[e[t+5]]+"-"+c[e[t+6]]+c[e[t+7]]+"-"+c[e[t+8]]+c[e[t+9]]+"-"+c[e[t+10]]+c[e[t+11]]+c[e[t+12]]+c[e[t+13]]+c[e[t+14]]+c[e[t+15]]).toLowerCase();if(!s(n))throw TypeError("Stringified UUID is invalid");return n}(r)};function h(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?h(n,!0).forEach((function(t){g(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):h(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var v,m,y;t=r.hmd(t),y=r(738),m=r(901),v=function(){var t=function(){function t(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,r;return n=t,r=[{key:"defaults",value:function(e,t){var n,r;for(n in t)r=t[n],void 0===e[n]&&(e[n]=r);return object}},{key:"remove",value:function(t,n){var r;return r=-1,t.some((function(t,i){return n(e,i)&&(r=i),r>-1})),r>-1?t.splice(r,1):[]}},{key:"omit",value:function(e){var t,n,r,i;i=p({},e);for(var o=arguments.length,a=new Array(o>1?o-1:0),u=1;u<o;u++)a[u-1]=arguments[u];for(t=0,n=(r=[].concat.apply([],a)).length;t<n;t++)delete i[r[t]];return i}},{key:"log",value:function(e){if(m.debug)return console.log(e)}},{key:"sha1",value:function(e){return y(e).toString()}},{key:"random",value:function(e){return e?parseInt(this.sha1(e).substr(0,13),16)/0xfffffffffffff:Math.random()}},{key:"check_weights",value:function(e){var t,n,r;for(n in t=[],e)r=e[n],t.push(null!=r.weight);return t.every((function(e){return e}))}},{key:"sum_weights",value:function(e){var t,n;for(t in n=0,e)n+=e[t].weight||0;return n}},{key:"validate_weights",value:function(e){var t,n,r;for(n in t=[],e)r=e[n],t.push(null!=r.weight);return t.every((function(e){return e||t.every((function(e){return!e}))}))}}],null&&d(n.prototype,null),r&&d(n,r),t}();return t.keys=Object.keys,t.uuid=f,t}.call(void 0),t.exports=v},12:e=>{var t,n;t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n={rotl:function(e,t){return e<<t|e>>>32-t},rotr:function(e,t){return e<<32-t|e>>>t},endian:function(e){if(e.constructor==Number)return 16711935&n.rotl(e,8)|4278255360&n.rotl(e,24);for(var t=0;t<e.length;t++)e[t]=n.endian(e[t]);return e},randomBytes:function(e){for(var t=[];e>0;e--)t.push(Math.floor(256*Math.random()));return t},bytesToWords:function(e){for(var t=[],n=0,r=0;n<e.length;n++,r+=8)t[r>>>5]|=e[n]<<24-r%32;return t},wordsToBytes:function(e){for(var t=[],n=0;n<32*e.length;n+=8)t.push(e[n>>>5]>>>24-n%32&255);return t},bytesToHex:function(e){for(var t=[],n=0;n<e.length;n++)t.push((e[n]>>>4).toString(16)),t.push((15&e[n]).toString(16));return t.join("")},hexToBytes:function(e){for(var t=[],n=0;n<e.length;n+=2)t.push(parseInt(e.substr(n,2),16));return t},bytesToBase64:function(e){for(var n=[],r=0;r<e.length;r+=3)for(var i=e[r]<<16|e[r+1]<<8|e[r+2],o=0;o<4;o++)8*r+6*o<=8*e.length?n.push(t.charAt(i>>>6*(3-o)&63)):n.push("=");return n.join("")},base64ToBytes:function(e){e=e.replace(/[^A-Z0-9+\/]/gi,"");for(var n=[],r=0,i=0;r<e.length;i=++r%4)0!=i&&n.push((t.indexOf(e.charAt(r-1))&Math.pow(2,-2*i+8)-1)<<2*i|t.indexOf(e.charAt(r))>>>6-2*i);return n}},e.exports=n},738:(e,t,n)=>{var r,i,o,a;r=n(12),i=n(487).utf8,o=n(487).bin,(a=function(e,t){var n=r.wordsToBytes(function(e){e.constructor==String?e=i.stringToBytes(e):"undefined"!=typeof Buffer&&"function"==typeof Buffer.isBuffer&&Buffer.isBuffer(e)?e=Array.prototype.slice.call(e,0):Array.isArray(e)||(e=e.toString());var t=r.bytesToWords(e),n=8*e.length,o=[],a=1732584193,u=-271733879,s=-1732584194,c=271733878,l=-1009589776;t[n>>5]|=128<<24-n%32,t[15+(n+64>>>9<<4)]=n;for(var f=0;f<t.length;f+=16){for(var h=a,p=u,g=s,d=c,v=l,m=0;m<80;m++){if(m<16)o[m]=t[f+m];else{var y=o[m-3]^o[m-8]^o[m-14]^o[m-16];o[m]=y<<1|y>>>31}var _=(a<<5|a>>>27)+l+(o[m]>>>0)+(m<20?1518500249+(u&s|~u&c):m<40?1859775393+(u^s^c):m<60?(u&s|u&c|s&c)-1894007588:(u^s^c)-899497514);l=c,c=s,s=u<<30|u>>>2,u=a,a=_}a+=h,u+=p,s+=g,c+=d,l+=v}return[a,u,s,c,l]}(e));return t&&t.asBytes?n:t&&t.asString?o.bytesToString(n):r.bytesToHex(n)})._blocksize=16,a._digestsize=20,e.exports=a}},n={};function r(e){if(n[e])return n[e].exports;var i=n[e]={id:e,loaded:!1,exports:{}};return t[e].call(i.exports,i,i.exports,r),i.loaded=!0,i.exports}return r.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(14)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,