var AlephBet=function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var i,o,u,a,s;o=n(3),s=n(6),a=n(7),u=n(1),i=function(){var t=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,i;return e=t,i=[{key:"log",value:function(t){if(u.debug)return console.log(t)}},{key:"sha1",value:function(t){return a(t).toString()}},{key:"random",value:function(t){return t?parseInt(this.sha1(t).substr(0,13),16)/0xfffffffffffff:Math.random()}},{key:"check_weights",value:function(t){var e,n,r;for(n in e=[],t)r=t[n],e.push(null!=r.weight);return e.every(function(t){return t})}},{key:"sum_weights",value:function(t){var e,n;for(e in n=0,t)n+=t[e].weight||0;return n}},{key:"validate_weights",value:function(t){var e,n,r;for(n in e=[],t)r=t[n],e.push(null!=r.weight);return e.every(function(t){return t||e.every(function(t){return!t})})}}],(n=null)&&r(e.prototype,n),i&&r(e,i),t}();return t.defaults=o.defaults,t.keys=o.keys,t.remove=o.remove,t.omit=o.omit,t.uuid=s.v4,t}.call(void 0),t.exports=i},function(t,e,n){"use strict";t.exports={debug:!1}},function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var u,a,s,c;c=n(0),a=n(9),s=n(1),u=function(){var t=function t(){o(this,t)};return t.options=s,t.utils=c,t.GimelAdapter=a.GimelAdapter,t.PersistentQueueGoogleAnalyticsAdapter=a.PersistentQueueGoogleAnalyticsAdapter,t.PersistentQueueKeenAdapter=a.PersistentQueueKeenAdapter,t.Experiment=function(){var t,e,n=function(){function n(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};o(this,n),this.options=r,c.defaults(this.options,n._options),e.call(this),this.name=this.options.name,this.variants=this.options.variants,this.user_id=this.options.user_id,this.variant_names=c.keys(this.variants),t.call(this)}return i(n,[{key:"run",value:function(){var t;return c.log("running with options: ".concat(JSON.stringify(this.options))),(t=this.get_stored_variant())?(c.log("".concat(t," active")),this.activate_variant(t)):this.conditionally_activate_variant()}},{key:"activate_variant",value:function(t){var e;return null!=(e=this.variants[t])&&e.activate(this),this.storage().set("".concat(this.options.name,":variant"),t)}},{key:"conditionally_activate_variant",value:function(){var t;if(this.options.trigger()&&(c.log("trigger set"),this.in_sample()))return c.log("in sample"),t=this.pick_variant(),this.tracking().experiment_start(this,t),this.activate_variant(t)}},{key:"goal_complete",value:function(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(c.defaults(n,{unique:!0}),(!n.unique||!this.storage().get("".concat(this.options.name,":").concat(t)))&&(e=this.get_stored_variant()))return n.unique&&this.storage().set("".concat(this.options.name,":").concat(t),!0),c.log("experiment: ".concat(this.options.name," variant:").concat(e," goal:").concat(t," complete")),this.tracking().goal_complete(this,e,t,n)}},{key:"get_stored_variant",value:function(){return this.storage().get("".concat(this.options.name,":variant"))}},{key:"pick_variant",value:function(){var t;return t=c.check_weights(this.variants),c.log("all variants have weights: ".concat(t)),t?this.pick_weighted_variant():this.pick_unweighted_variant()}},{key:"pick_weighted_variant",value:function(){var t,e,n,r;for(t in r=c.sum_weights(this.variants),n=Math.ceil(this._random("variant")*r),e=this.variants)if((n-=e[t].weight)<=0)return t}},{key:"pick_unweighted_variant",value:function(){var t,e,n;return e=1/this.variant_names.length,t=Math.floor(this._random("variant")/e),n=this.variant_names[t],c.log("".concat(n," picked")),n}},{key:"in_sample",value:function(){var t;return void 0!==(t=this.storage().get("".concat(this.options.name,":in_sample")))?t:(t=this._random("sample")<=this.options.sample,this.storage().set("".concat(this.options.name,":in_sample"),t),t)}},{key:"_random",value:function(t){var e;return this.user_id?(e="".concat(this.name,".").concat(t,".").concat(this.user_id),c.random(e)):c.random()}},{key:"add_goal",value:function(t){return t.add_experiment(this)}},{key:"add_goals",value:function(t){var e,n,r,i;for(i=[],n=0,r=t.length;n<r;n++)e=t[n],i.push(this.add_goal(e));return i}},{key:"storage",value:function(){return this.options.storage_adapter}},{key:"tracking",value:function(){return this.options.tracking_adapter}}]),n}();return n._options={name:null,variants:null,user_id:null,sample:1,trigger:function(){return!0},tracking_adapter:a.GoogleUniversalAnalyticsAdapter,storage_adapter:a.LocalStorageAdapter},t=function(){return this.run()},e=function(){if(null===this.options.name)throw new Error("an experiment name must be specified");if(null===this.options.variants)throw new Error("variants must be provided");if("function"!=typeof this.options.trigger)throw new Error("trigger must be a function");if(!c.validate_weights(this.options.variants))throw new Error("not all variants have weights")},n}.call(this),t.Goal=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};o(this,t),this.name=e,this.props=n,c.defaults(this.props,{unique:!0}),this.experiments=[]}return i(t,[{key:"add_experiment",value:function(t){return this.experiments.push(t)}},{key:"add_experiments",value:function(t){var e,n,r,i;for(i=[],n=0,r=t.length;n<r;n++)e=t[n],i.push(this.add_experiment(e));return i}},{key:"complete",value:function(){var t,e,n,r,i;for(i=[],e=0,n=(r=this.experiments).length;e<n;e++)t=r[e],i.push(t.goal_complete(this.name,this.props));return i}}]),t}(),t}.call(void 0),t.exports=u},function(t,e,n){(function(t,n){(function(){function r(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function i(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function o(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function u(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}function a(t){return function(e){return t(e)}}function s(t,e){return t.has(e)}function c(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}function f(t,e){return function(n){return t(e(n))}}function l(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}function h(){}function p(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function v(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function g(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function d(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new g;++e<n;)this.add(t[e])}function _(t){this.size=(this.__data__=new v(t)).size}function y(t,e){var n=Sn(t),r=!n&&An(t),i=!n&&!r&&qn(t),o=!n&&!r&&!i&&Bn(t),u=n||r||i||o,a=u?function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}(t.length,String):[],s=a.length;for(var c in t)!e&&!Te.call(t,c)||u&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||$(c,s))||a.push(c);return a}function m(t,e,n){var r=t[e];Te.call(t,e)&&nt(r,n)&&(n!==wt||e in t)||w(t,e,n)}function b(t,e){for(var n=t.length;n--;)if(nt(t[n][0],e))return n;return-1}function w(t,e,n){"__proto__"==e&&Ye?Ye(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function k(t,e,n,r,i,o){var u,a=e&At,s=e&St,c=e&qt;if(n&&(u=i?n(t,r,i,o):n(t)),u!==wt)return u;if(!ut(t))return t;var f=Sn(t);if(f){if(u=function(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&Te.call(t,"index")&&(n.index=t.index,n.input=t.input),n}(t),!a)return function(t,e){var n=-1,r=t.length;for(e||(e=Array(r));++n<r;)e[n]=t[n];return e}(t,u)}else{var l=jn(t),h=l==Nt||l==Ft;if(qn(t))return function(t,e){if(e)return t.slice();var n=t.length,r=$e?$e(n):new t.constructor(n);return t.copy(r),r}(t,a);if(l==Jt||l==Mt||h&&!i){if(u=s||h?{}:function(t){return"function"!=typeof t.constructor||Q(t)?{}:mn(Je(t))}(t),!a)return s?function(t,e){return U(t,kn(t),e)}(t,function(t,e){return t&&U(e,vt(e),t)}(u,t)):function(t,e){return U(t,wn(t),e)}(t,function(t,e){return t&&U(e,pt(e),t)}(u,t))}else{if(!be[l])return i?t:{};u=function(t,e,n){var r=t.constructor;switch(e){case ee:return M(t);case Dt:case Lt:return new r(+t);case ne:return function(t,e){return new t.constructor(e?M(t.buffer):t.buffer,t.byteOffset,t.byteLength)}(t,n);case re:case ie:case oe:case ue:case ae:case se:case ce:case fe:case le:return function(t,e){return new t.constructor(e?M(t.buffer):t.buffer,t.byteOffset,t.length)}(t,n);case Gt:return new r;case Ht:case Xt:return new r(t);case Kt:return function(t){var e=new t.constructor(t.source,de.exec(t));return e.lastIndex=t.lastIndex,e}(t);case Wt:return new r;case Yt:return function(t){return _n?Object(_n.call(t)):{}}(t)}}(t,l,a)}}o||(o=new _);var p=o.get(t);if(p)return p;if(o.set(t,u),Pn(t))return t.forEach(function(r){u.add(k(r,e,n,r,t,o))}),u;if(En(t))return t.forEach(function(r,i){u.set(i,k(r,e,n,i,t,o))}),u;var v=f?wt:(c?s?N:R:s?vt:pt)(t);return function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););}(v||t,function(r,i){v&&(r=t[i=r]),m(u,i,k(r,e,n,i,t,o))}),u}function j(t,e){for(var n=0,r=(e=C(e,t)).length;null!=t&&n<r;)t=t[X(e[n++])];return n&&n==r?t:wt}function x(t,e,n){var r=e(t);return Sn(t)?r:o(r,n(t))}function O(t){return null==t?t===wt?Zt:$t:Xe&&Xe in Object(t)?function(t){var e=Te.call(t,Xe),n=t[Xe];try{t[Xe]=wt;var r=!0}catch(t){}var i=Le.call(t);return r&&(e?t[Xe]=n:delete t[Xe]),i}(t):function(t){return Le.call(t)}(t)}function A(t,e){return null!=t&&e in Object(t)}function S(t){return at(t)&&O(t)==Mt}function q(t,e,n,r,i){return t===e||(null==t||null==e||!at(t)&&!at(e)?t!=t&&e!=e:function(t,e,n,r,i,o){var u=Sn(t),a=Sn(e),s=u?Ut:jn(t),c=a?Ut:jn(e),f=(s=s==Mt?Jt:s)==Jt,l=(c=c==Mt?Jt:c)==Jt,h=s==c;if(h&&qn(t)){if(!qn(e))return!1;u=!0,f=!1}if(h&&!f)return o||(o=new _),u||Bn(t)?D(t,e,n,r,i,o):L(t,e,s,n,r,i,o);if(!(n&Et)){var p=f&&Te.call(t,"__wrapped__"),v=l&&Te.call(e,"__wrapped__");if(p||v){var g=p?t.value():t,d=v?e.value():e;return o||(o=new _),i(g,d,n,r,o)}}return!!h&&(o||(o=new _),function(t,e,n,r,i,o){var u=n&Et,a=R(t),s=a.length;if(s!=R(e).length&&!u)return!1;for(var c=s;c--;){var f=a[c];if(!(u?f in e:Te.call(e,f)))return!1}var l=o.get(t);if(l&&o.get(e))return l==e;var h=!0;o.set(t,e),o.set(e,t);for(var p=u;++c<s;){f=a[c];var v=t[f],g=e[f];if(r)var d=u?r(g,v,f,e,t,o):r(v,g,f,t,e,o);if(!(d===wt?v===g||i(v,g,n,r,o):d)){h=!1;break}p||(p="constructor"==f)}if(h&&!p){var _=t.constructor,y=e.constructor;_!=y&&"constructor"in t&&"constructor"in e&&!("function"==typeof _&&_ instanceof _&&"function"==typeof y&&y instanceof y)&&(h=!1)}return o.delete(t),o.delete(e),h}(t,e,n,r,i,o))}(t,e,n,r,q,i))}function E(t){return!(!ut(t)||function(t){return!!De&&De in t}(t))&&(it(t)?Ne:_e).test(Y(t))}function P(t){return"function"==typeof t?t:null==t?dt:"object"==typeof t?Sn(t)?function(t,e){return J(t)&&V(e)?K(X(t),e):function(n){var r=lt(n,t);return r===wt&&r===e?ht(n,t):q(e,r,Et|Pt)}}(t[0],t[1]):function(t){var e=function(t){for(var e=pt(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,V(i)]}return e}(t);return 1==e.length&&e[0][2]?K(e[0][0],e[0][1]):function(n){return n===t||function(t,e,n,r){var i=n.length,o=i,u=!r;if(null==t)return!o;for(t=Object(t);i--;){var a=n[i];if(u&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++i<o;){var s=(a=n[i])[0],c=t[s],f=a[1];if(u&&a[2]){if(c===wt&&!(s in t))return!1}else{var l=new _;if(r)var h=r(c,f,s,t,e,l);if(!(h===wt?q(f,c,Et|Pt,r,l):h))return!1}}return!0}(n,t,e)}}(t):yt(t)}function B(t){if(!ut(t))return function(t){var e=[];if(null!=t)for(var n in Object(t))e.push(n);return e}(t);var e=Q(t),n=[];for(var r in t)("constructor"!=r||!e&&Te.call(t,r))&&n.push(r);return n}function z(t){if("string"==typeof t)return t;if(Sn(t))return i(t,z)+"";if(ct(t))return yn?yn.call(t):"";var e=t+"";return"0"==e&&1/t==-It?"-0":e}function I(t,e){return null==(t=function(t,e){return e.length<2?t:j(t,function(t,e,n){var r=-1,i=t.length;e<0&&(e=-e>i?0:i+e),(n=n>i?i:n)<0&&(n+=i),i=e>n?0:n-e>>>0,e>>>=0;for(var o=Array(i);++r<i;)o[r]=t[r+e];return o}(e,0,-1))}(t,e=C(e,t)))||delete t[X(tt(e))]}function C(t,e){return Sn(t)?t:J(t,e)?[t]:On(ft(t))}function M(t){var e=new t.constructor(t.byteLength);return new He(e).set(new He(t)),e}function U(t,e,n,r){var i=!n;n||(n={});for(var o=-1,u=e.length;++o<u;){var a=e[o],s=r?r(n[a],t[a],a,n,t):wt;s===wt&&(s=t[a]),i?w(n,a,s):m(n,a,s)}return n}function T(t){return st(t)?wt:t}function D(t,e,n,r,i,o){var a=n&Et,c=t.length,f=e.length;if(c!=f&&!(a&&f>c))return!1;var l=o.get(t);if(l&&o.get(e))return l==e;var h=-1,p=!0,v=n&Pt?new d:wt;for(o.set(t,e),o.set(e,t);++h<c;){var g=t[h],_=e[h];if(r)var y=a?r(_,g,h,e,t,o):r(g,_,h,t,e,o);if(y!==wt){if(y)continue;p=!1;break}if(v){if(!u(e,function(t,e){if(!s(v,e)&&(g===t||i(g,t,n,r,o)))return v.push(e)})){p=!1;break}}else if(g!==_&&!i(g,_,n,r,o)){p=!1;break}}return o.delete(t),o.delete(e),p}function L(t,e,n,r,i,o,u){switch(n){case ne:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case ee:return!(t.byteLength!=e.byteLength||!o(new He(t),new He(e)));case Dt:case Lt:case Ht:return nt(+t,+e);case Rt:return t.name==e.name&&t.message==e.message;case Kt:case Xt:return t==e+"";case Gt:var a=c;case Wt:var s=r&Et;if(a||(a=l),t.size!=e.size&&!s)return!1;var f=u.get(t);if(f)return f==e;r|=Pt,u.set(t,e);var h=D(a(t),a(e),r,i,o,u);return u.delete(t),h;case Yt:if(_n)return _n.call(t)==_n.call(e)}return!1}function R(t){return x(t,pt,wn)}function N(t){return x(t,vt,kn)}function F(t,e){var n=t.__data__;return function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}(e)?n["string"==typeof e?"string":"hash"]:n.map}function G(t,e){var n=function(t,e){return null==t?wt:t[e]}(t,e);return E(n)?n:wt}function H(t){return Sn(t)||An(t)||!!(We&&t&&t[We])}function $(t,e){var n=typeof t;return!!(e=null==e?Ct:e)&&("number"==n||"symbol"!=n&&ye.test(t))&&t>-1&&t%1==0&&t<e}function J(t,e){if(Sn(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!ct(t))||pe.test(t)||!he.test(t)||null!=e&&t in Object(e)}function Q(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Ce)}function V(t){return t==t&&!ut(t)}function K(t,e){return function(n){return null!=n&&n[t]===e&&(e!==wt||t in Object(n))}}function W(t,e,n){return e=nn(e===wt?t.length-1:e,0),function(){for(var i=arguments,o=-1,u=nn(i.length-e,0),a=Array(u);++o<u;)a[o]=i[e+o];o=-1;for(var s=Array(e+1);++o<e;)s[o]=i[o];return s[e]=n(a),r(t,this,s)}}function X(t){if("string"==typeof t||ct(t))return t;var e=t+"";return"0"==e&&1/t==-It?"-0":e}function Y(t){if(null!=t){try{return Ue.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Z(t){return null!=t&&t.length?function t(e,n,r,i,u){var a=-1,s=e.length;for(r||(r=H),u||(u=[]);++a<s;){var c=e[a];n>0&&r(c)?n>1?t(c,n-1,r,i,u):o(u,c):i||(u[u.length]=c)}return u}(t,1):[]}function tt(t){var e=null==t?0:t.length;return e?t[e-1]:wt}function et(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError(jt);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var u=t.apply(this,r);return n.cache=o.set(i,u)||o,u};return n.cache=new(et.Cache||g),n}function nt(t,e){return t===e||t!=t&&e!=e}function rt(t){return null!=t&&ot(t.length)&&!it(t)}function it(t){if(!ut(t))return!1;var e=O(t);return e==Nt||e==Ft||e==Tt||e==Vt}function ot(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=Ct}function ut(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function at(t){return null!=t&&"object"==typeof t}function st(t){if(!at(t)||O(t)!=Jt)return!1;var e=Je(t);if(null===e)return!0;var n=Te.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&Ue.call(n)==Re}function ct(t){return"symbol"==typeof t||at(t)&&O(t)==Yt}function ft(t){return null==t?"":z(t)}function lt(t,e,n){var r=null==t?wt:j(t,e);return r===wt?n:r}function ht(t,e){return null!=t&&function(t,e,n){for(var r=-1,i=(e=C(e,t)).length,o=!1;++r<i;){var u=X(e[r]);if(!(o=null!=t&&n(t,u)))break;t=t[u]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&ot(i)&&$(u,i)&&(Sn(t)||An(t))}(t,e,A)}function pt(t){return rt(t)?y(t):function(t){if(!Q(t))return en(t);var e=[];for(var n in Object(t))Te.call(t,n)&&"constructor"!=n&&e.push(n);return e}(t)}function vt(t){return rt(t)?y(t,!0):B(t)}function gt(t){return function(){return t}}function dt(t){return t}function _t(t){return P("function"==typeof t?t:k(t,At))}function yt(t){return J(t)?function(t){return function(e){return null==e?wt:e[t]}}(X(t)):function(t){return function(e){return j(e,t)}}(t)}function mt(){return[]}function bt(){return!1}var wt,kt=200,jt="Expected a function",xt="__lodash_hash_undefined__",Ot=500,At=1,St=2,qt=4,Et=1,Pt=2,Bt=800,zt=16,It=1/0,Ct=9007199254740991,Mt="[object Arguments]",Ut="[object Array]",Tt="[object AsyncFunction]",Dt="[object Boolean]",Lt="[object Date]",Rt="[object Error]",Nt="[object Function]",Ft="[object GeneratorFunction]",Gt="[object Map]",Ht="[object Number]",$t="[object Null]",Jt="[object Object]",Qt="[object Promise]",Vt="[object Proxy]",Kt="[object RegExp]",Wt="[object Set]",Xt="[object String]",Yt="[object Symbol]",Zt="[object Undefined]",te="[object WeakMap]",ee="[object ArrayBuffer]",ne="[object DataView]",re="[object Float32Array]",ie="[object Float64Array]",oe="[object Int8Array]",ue="[object Int16Array]",ae="[object Int32Array]",se="[object Uint8Array]",ce="[object Uint8ClampedArray]",fe="[object Uint16Array]",le="[object Uint32Array]",he=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,pe=/^\w*$/,ve=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ge=/\\(\\)?/g,de=/\w*$/,_e=/^\[object .+?Constructor\]$/,ye=/^(?:0|[1-9]\d*)$/,me={};me[re]=me[ie]=me[oe]=me[ue]=me[ae]=me[se]=me[ce]=me[fe]=me[le]=!0,me[Mt]=me[Ut]=me[ee]=me[Dt]=me[ne]=me[Lt]=me[Rt]=me[Nt]=me[Gt]=me[Ht]=me[Jt]=me[Kt]=me[Wt]=me[Xt]=me[te]=!1;var be={};be[Mt]=be[Ut]=be[ee]=be[ne]=be[Dt]=be[Lt]=be[re]=be[ie]=be[oe]=be[ue]=be[ae]=be[Gt]=be[Ht]=be[Jt]=be[Kt]=be[Wt]=be[Xt]=be[Yt]=be[se]=be[ce]=be[fe]=be[le]=!0,be[Rt]=be[Nt]=be[te]=!1;var we="object"==typeof t&&t&&t.Object===Object&&t,ke="object"==typeof self&&self&&self.Object===Object&&self,je=we||ke||Function("return this")(),xe=e&&!e.nodeType&&e,Oe=xe&&"object"==typeof n&&n&&!n.nodeType&&n,Ae=Oe&&Oe.exports===xe,Se=Ae&&we.process,qe=function(){try{return Se&&Se.binding&&Se.binding("util")}catch(t){}}(),Ee=qe&&qe.isMap,Pe=qe&&qe.isSet,Be=qe&&qe.isTypedArray,ze=Array.prototype,Ie=Function.prototype,Ce=Object.prototype,Me=je["__core-js_shared__"],Ue=Ie.toString,Te=Ce.hasOwnProperty,De=function(){var t=/[^.]+$/.exec(Me&&Me.keys&&Me.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),Le=Ce.toString,Re=Ue.call(Object),Ne=RegExp("^"+Ue.call(Te).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Fe=Ae?je.Buffer:wt,Ge=je.Symbol,He=je.Uint8Array,$e=Fe?Fe.allocUnsafe:wt,Je=f(Object.getPrototypeOf,Object),Qe=Object.create,Ve=Ce.propertyIsEnumerable,Ke=ze.splice,We=Ge?Ge.isConcatSpreadable:wt,Xe=Ge?Ge.toStringTag:wt,Ye=function(){try{var t=G(Object,"defineProperty");return t({},"",{}),t}catch(t){}}(),Ze=Object.getOwnPropertySymbols,tn=Fe?Fe.isBuffer:wt,en=f(Object.keys,Object),nn=Math.max,rn=Date.now,on=G(je,"DataView"),un=G(je,"Map"),an=G(je,"Promise"),sn=G(je,"Set"),cn=G(je,"WeakMap"),fn=G(Object,"create"),ln=Y(on),hn=Y(un),pn=Y(an),vn=Y(sn),gn=Y(cn),dn=Ge?Ge.prototype:wt,_n=dn?dn.valueOf:wt,yn=dn?dn.toString:wt,mn=function(){function t(){}return function(e){if(!ut(e))return{};if(Qe)return Qe(e);t.prototype=e;var n=new t;return t.prototype=wt,n}}();p.prototype.clear=function(){this.__data__=fn?fn(null):{},this.size=0},p.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},p.prototype.get=function(t){var e=this.__data__;if(fn){var n=e[t];return n===xt?wt:n}return Te.call(e,t)?e[t]:wt},p.prototype.has=function(t){var e=this.__data__;return fn?e[t]!==wt:Te.call(e,t)},p.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=fn&&e===wt?xt:e,this},v.prototype.clear=function(){this.__data__=[],this.size=0},v.prototype.delete=function(t){var e=this.__data__,n=b(e,t);return!(n<0||(n==e.length-1?e.pop():Ke.call(e,n,1),--this.size,0))},v.prototype.get=function(t){var e=this.__data__,n=b(e,t);return n<0?wt:e[n][1]},v.prototype.has=function(t){return b(this.__data__,t)>-1},v.prototype.set=function(t,e){var n=this.__data__,r=b(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},g.prototype.clear=function(){this.size=0,this.__data__={hash:new p,map:new(un||v),string:new p}},g.prototype.delete=function(t){var e=F(this,t).delete(t);return this.size-=e?1:0,e},g.prototype.get=function(t){return F(this,t).get(t)},g.prototype.has=function(t){return F(this,t).has(t)},g.prototype.set=function(t,e){var n=F(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},d.prototype.add=d.prototype.push=function(t){return this.__data__.set(t,xt),this},d.prototype.has=function(t){return this.__data__.has(t)},_.prototype.clear=function(){this.__data__=new v,this.size=0},_.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},_.prototype.get=function(t){return this.__data__.get(t)},_.prototype.has=function(t){return this.__data__.has(t)},_.prototype.set=function(t,e){var n=this.__data__;if(n instanceof v){var r=n.__data__;if(!un||r.length<kt-1)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new g(r)}return n.set(t,e),this.size=n.size,this};var bn=Ye?function(t,e){return Ye(t,"toString",{configurable:!0,enumerable:!1,value:gt(e),writable:!0})}:dt,wn=Ze?function(t){return null==t?[]:(t=Object(t),function(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var u=t[n];e(u,n,t)&&(o[i++]=u)}return o}(Ze(t),function(e){return Ve.call(t,e)}))}:mt,kn=Ze?function(t){for(var e=[];t;)o(e,wn(t)),t=Je(t);return e}:mt,jn=O;(on&&jn(new on(new ArrayBuffer(1)))!=ne||un&&jn(new un)!=Gt||an&&jn(an.resolve())!=Qt||sn&&jn(new sn)!=Wt||cn&&jn(new cn)!=te)&&(jn=function(t){var e=O(t),n=e==Jt?t.constructor:wt,r=n?Y(n):"";if(r)switch(r){case ln:return ne;case hn:return Gt;case pn:return Qt;case vn:return Wt;case gn:return te}return e});var xn=function(t){var e=0,n=0;return function(){var r=rn(),i=zt-(r-n);if(n=r,i>0){if(++e>=Bt)return arguments[0]}else e=0;return t.apply(wt,arguments)}}(bn),On=function(t){var e=et(t,function(t){return n.size===Ot&&n.clear(),t}),n=e.cache;return e}(function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(ve,function(t,n,r,i){e.push(r?i.replace(ge,"$1"):n||t)}),e});et.Cache=g;var An=S(function(){return arguments}())?S:function(t){return at(t)&&Te.call(t,"callee")&&!Ve.call(t,"callee")},Sn=Array.isArray,qn=tn||bt,En=Ee?a(Ee):function(t){return at(t)&&jn(t)==Gt},Pn=Pe?a(Pe):function(t){return at(t)&&jn(t)==Wt},Bn=Be?a(Be):function(t){return at(t)&&ot(t.length)&&!!me[O(t)]},zn=function(t,e){return xn(W(t,e,dt),t+"")}(function(t,e){t=Object(t);var n=-1,r=e.length,i=r>2?e[2]:wt;for(i&&function(t,e,n){if(!ut(n))return!1;var r=typeof e;return!!("number"==r?rt(n)&&$(e,n.length):"string"==r&&e in n)&&nt(n[e],t)}(e[0],e[1],i)&&(r=1);++n<r;)for(var o=e[n],u=vt(o),a=-1,s=u.length;++a<s;){var c=u[a],f=t[c];(f===wt||nt(f,Ce[c])&&!Te.call(t,c))&&(t[c]=o[c])}return t}),In=function(t){return xn(W(t,wt,Z),t+"")}(function(t,e){var n={};if(null==t)return n;var r=!1;e=i(e,function(e){return e=C(e,t),r||(r=e.length>1),e}),U(t,N(t),n),r&&(n=k(n,At|St|qt,T));for(var o=e.length;o--;)I(n,e[o]);return n});h.constant=gt,h.defaults=zn,h.flatten=Z,h.iteratee=_t,h.keys=pt,h.keysIn=vt,h.memoize=et,h.omit=In,h.property=yt,h.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=function(){var t=h.iteratee||_t;return t=t===_t?P:t,arguments.length?t(arguments[0],arguments[1]):t}(e,3);++r<o;){var u=t[r];e(u,r,t)&&(n.push(u),i.push(r))}return function(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;$(i)?Ke.call(t,i,1):I(t,i)}}}(t,i),n},h.eq=nt,h.get=lt,h.hasIn=ht,h.identity=dt,h.isArguments=An,h.isArray=Sn,h.isArrayLike=rt,h.isBuffer=qn,h.isFunction=it,h.isLength=ot,h.isMap=En,h.isObject=ut,h.isObjectLike=at,h.isPlainObject=st,h.isSet=Pn,h.isSymbol=ct,h.isTypedArray=Bn,h.last=tt,h.stubArray=mt,h.stubFalse=bt,h.toString=ft,h.VERSION="4.17.5",Oe&&((Oe.exports=h)._=h,xe._=h)}).call(this)}).call(this,n(4),n(5)(t))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){var r;(function(){var i;if("function"==typeof this.require)try{var o=this.require("crypto").randomBytes;i=o&&function(){return o(16)}}catch(t){}if(!i&&this.crypto&&crypto.getRandomValues){var u=new Uint8Array(16);i=function(){return crypto.getRandomValues(u),u}}if(!i){var a=new Array(16);i=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),a[e]=t>>>((3&e)<<3)&255;return a}}for(var s="function"==typeof this.Buffer?this.Buffer:Array,c=[],f={},l=0;l<256;l++)c[l]=(l+256).toString(16).substr(1),f[c[l]]=l;function h(t,e){var n=e||0,r=c;return r[t[n++]]+r[t[n++]]+r[t[n++]]+r[t[n++]]+"-"+r[t[n++]]+r[t[n++]]+"-"+r[t[n++]]+r[t[n++]]+"-"+r[t[n++]]+r[t[n++]]+"-"+r[t[n++]]+r[t[n++]]+r[t[n++]]+r[t[n++]]+r[t[n++]]+r[t[n++]]}var p=i(),v=[1|p[0],p[1],p[2],p[3],p[4],p[5]],g=16383&(p[6]<<8|p[7]),d=0,_=0;function y(t,e,n){var r=e&&n||0;"string"==typeof t&&(e="binary"==t?new s(16):null,t=null);var o=(t=t||{}).random||(t.rng||i)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e)for(var u=0;u<16;u++)e[r+u]=o[u];return e||h(o)}var m=y;m.v1=function(t,e,n){var r=e&&n||0,i=e||[],o=null!=(t=t||{}).clockseq?t.clockseq:g,u=null!=t.msecs?t.msecs:(new Date).getTime(),a=null!=t.nsecs?t.nsecs:_+1,s=u-d+(a-_)/1e4;if(s<0&&null==t.clockseq&&(o=o+1&16383),(s<0||u>d)&&null==t.nsecs&&(a=0),a>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");d=u,_=a,g=o;var c=(1e4*(268435455&(u+=122192928e5))+a)%4294967296;i[r++]=c>>>24&255,i[r++]=c>>>16&255,i[r++]=c>>>8&255,i[r++]=255&c;var f=u/4294967296*1e4&268435455;i[r++]=f>>>8&255,i[r++]=255&f,i[r++]=f>>>24&15|16,i[r++]=f>>>16&255,i[r++]=o>>>8|128,i[r++]=255&o;for(var l=t.node||v,p=0;p<6;p++)i[r+p]=l[p];return e||h(i)},m.v4=y,m.parse=function(t,e,n){var r=e&&n||0,i=0;for(e=e||[],t.toLowerCase().replace(/[0-9a-f]{2}/g,function(t){i<16&&(e[r+i++]=f[t])});i<16;)e[r+i++]=0;return e},m.unparse=h,m.BufferClass=s,void 0===(r=function(){return m}.call(e,n,e,t))||(t.exports=r)}).call(this)},function(t,e,n){var r,i,o,u,a,s,c,f;t.exports=(f=n(8),i=(r=f).lib,o=i.WordArray,u=i.Hasher,a=r.algo,s=[],c=a.SHA1=u.extend({_doReset:function(){this._hash=new o.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var n=this._hash.words,r=n[0],i=n[1],o=n[2],u=n[3],a=n[4],c=0;c<80;c++){if(c<16)s[c]=0|t[e+c];else{var f=s[c-3]^s[c-8]^s[c-14]^s[c-16];s[c]=f<<1|f>>>31}var l=(r<<5|r>>>27)+a+s[c];l+=c<20?1518500249+(i&o|~i&u):c<40?1859775393+(i^o^u):c<60?(i&o|i&u|o&u)-1894007588:(i^o^u)-899497514,a=u,u=o,o=i<<30|i>>>2,i=r,r=l}n[0]=n[0]+r|0,n[1]=n[1]+i|0,n[2]=n[2]+o|0,n[3]=n[3]+u|0,n[4]=n[4]+a|0},_doFinalize:function(){var t=this._data,e=t.words,n=8*this._nDataBytes,r=8*t.sigBytes;return e[r>>>5]|=128<<24-r%32,e[14+(r+64>>>9<<4)]=Math.floor(n/4294967296),e[15+(r+64>>>9<<4)]=n,t.sigBytes=4*e.length,this._process(),this._hash},clone:function(){var t=u.clone.call(this);return t._hash=this._hash.clone(),t}}),r.SHA1=u._createHelper(c),r.HmacSHA1=u._createHmacHelper(c),f.SHA1)},function(t,e,n){var r;t.exports=(r=r||function(t,e){var n=Object.create||function(){function t(){}return function(e){var n;return t.prototype=e,n=new t,t.prototype=null,n}}(),r={},i=r.lib={},o=i.Base={extend:function(t){var e=n(this);return t&&e.mixIn(t),e.hasOwnProperty("init")&&this.init!==e.init||(e.init=function(){e.$super.init.apply(this,arguments)}),e.init.prototype=e,e.$super=this,e},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},u=i.WordArray=o.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:4*t.length},toString:function(t){return(t||s).stringify(this)},concat:function(t){var e=this.words,n=t.words,r=this.sigBytes,i=t.sigBytes;if(this.clamp(),r%4)for(var o=0;o<i;o++){var u=n[o>>>2]>>>24-o%4*8&255;e[r+o>>>2]|=u<<24-(r+o)%4*8}else for(o=0;o<i;o+=4)e[r+o>>>2]=n[o>>>2];return this.sigBytes+=i,this},clamp:function(){var e=this.words,n=this.sigBytes;e[n>>>2]&=4294967295<<32-n%4*8,e.length=t.ceil(n/4)},clone:function(){var t=o.clone.call(this);return t.words=this.words.slice(0),t},random:function(e){for(var n,r=[],i=function(e){e=e;var n=987654321,r=4294967295;return function(){var i=((n=36969*(65535&n)+(n>>16)&r)<<16)+(e=18e3*(65535&e)+(e>>16)&r)&r;return i/=4294967296,(i+=.5)*(t.random()>.5?1:-1)}},o=0;o<e;o+=4){var a=i(4294967296*(n||t.random()));n=987654071*a(),r.push(4294967296*a()|0)}return new u.init(r,e)}}),a=r.enc={},s=a.Hex={stringify:function(t){for(var e=t.words,n=t.sigBytes,r=[],i=0;i<n;i++){var o=e[i>>>2]>>>24-i%4*8&255;r.push((o>>>4).toString(16)),r.push((15&o).toString(16))}return r.join("")},parse:function(t){for(var e=t.length,n=[],r=0;r<e;r+=2)n[r>>>3]|=parseInt(t.substr(r,2),16)<<24-r%8*4;return new u.init(n,e/2)}},c=a.Latin1={stringify:function(t){for(var e=t.words,n=t.sigBytes,r=[],i=0;i<n;i++){var o=e[i>>>2]>>>24-i%4*8&255;r.push(String.fromCharCode(o))}return r.join("")},parse:function(t){for(var e=t.length,n=[],r=0;r<e;r++)n[r>>>2]|=(255&t.charCodeAt(r))<<24-r%4*8;return new u.init(n,e)}},f=a.Utf8={stringify:function(t){try{return decodeURIComponent(escape(c.stringify(t)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function(t){return c.parse(unescape(encodeURIComponent(t)))}},l=i.BufferedBlockAlgorithm=o.extend({reset:function(){this._data=new u.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=f.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(e){var n=this._data,r=n.words,i=n.sigBytes,o=this.blockSize,a=i/(4*o),s=(a=e?t.ceil(a):t.max((0|a)-this._minBufferSize,0))*o,c=t.min(4*s,i);if(s){for(var f=0;f<s;f+=o)this._doProcessBlock(r,f);var l=r.splice(0,s);n.sigBytes-=c}return new u.init(l,c)},clone:function(){var t=o.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0}),h=(i.Hasher=l.extend({cfg:o.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){l.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(t){return function(e,n){return new t.init(n).finalize(e)}},_createHmacHelper:function(t){return function(e,n){return new h.HMAC.init(t,n).finalize(e)}}}),r.algo={});return r}(Math),r)},function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var u,a,s;s=n(0),a=n(10),u=function(){var t=function t(){o(this,t)};return t.GimelAdapter=function(){var e=function(){function e(n,r){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t.LocalStorageAdapter;o(this,e),this._storage=i,this.url=n,this.namespace=r,this._queue=JSON.parse(this._storage.get(this.queue_name)||"[]"),this._flush()}return i(e,[{key:"_remove_quuid",value:function(t){var e=this;return function(n,r){if(!n)return s.remove(e._queue,function(e){return e.properties._quuid===t}),e._storage.set(e.queue_name,JSON.stringify(e._queue))}}},{key:"_jquery_get",value:function(t,e,n){return s.log("send request using jQuery"),window.jQuery.ajax({method:"GET",url:t,data:e,success:n})}},{key:"_plain_js_get",value:function(t,e,n){var r,i,o,u;return s.log("fallback on plain js xhr"),u=new XMLHttpRequest,i=(i=function(){var t;for(r in t=[],e)o=e[r],t.push("".concat(encodeURIComponent(r),"=").concat(encodeURIComponent(o)));return t}()).join("&").replace(/%20/g,"+"),u.open("GET","".concat(t,"?").concat(i)),u.onload=function(){if(200===u.status)return n()},u.send()}},{key:"_ajax_get",value:function(t,e,n){var r;return(null!=(r=window.jQuery)?r.ajax:void 0)?this._jquery_get(t,e,n):this._plain_js_get(t,e,n)}},{key:"_flush",value:function(){var t,e,n,r,i,o;for(o=[],e=0,r=(i=this._queue).length;e<r;e++)n=i[e],t=this._remove_quuid(n.properties._quuid),this._ajax_get(this.url,s.omit(n.properties,"_quuid"),t),o.push(null);return o}},{key:"_user_uuid",value:function(t,e){return t.user_id&&e.unique?s.sha1("".concat(this.namespace,".").concat(t.name,".").concat(t.user_id)):s.uuid()}},{key:"_track",value:function(t,e,n){return s.log("Persistent Queue Gimel track: ".concat(this.namespace,", ").concat(t.name,", ").concat(e,", ").concat(n.name)),this._queue.length>100&&this._queue.shift(),this._queue.push({properties:{experiment:t.name,_quuid:s.uuid(),uuid:this._user_uuid(t,n),variant:e,event:n.name,namespace:this.namespace}}),this._storage.set(this.queue_name,JSON.stringify(this._queue)),this._flush()}},{key:"experiment_start",value:function(t,e){return this._track(t,e,{name:"participate",unique:!0})}},{key:"goal_complete",value:function(t,e,n,r){return this._track(t,e,s.defaults({name:n},r))}}]),e}();return e.prototype.queue_name="_gimel_queue",e}.call(this),t.PersistentQueueGoogleAnalyticsAdapter=function(){var e=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.LocalStorageAdapter;o(this,e),this._storage=n,this._queue=JSON.parse(this._storage.get(this.queue_name)||"[]"),this._flush()}return i(e,[{key:"_remove_uuid",value:function(t){var e=this;return function(){return s.remove(e._queue,function(e){return e.uuid===t}),e._storage.set(e.queue_name,JSON.stringify(e._queue))}}},{key:"_flush",value:function(){var t,e,n,r,i,o;if("function"!=typeof ga)throw new Error("ga not defined. Please make sure your Universal analytics is set up correctly");for(o=[],e=0,r=(i=this._queue).length;e<r;e++)n=i[e],t=this._remove_uuid(n.uuid),o.push(ga("send","event",n.category,n.action,n.label,{hitCallback:t,nonInteraction:1}));return o}},{key:"_track",value:function(t,e,n){return s.log("Persistent Queue Google Universal Analytics track: ".concat(t,", ").concat(e,", ").concat(n)),this._queue.length>100&&this._queue.shift(),this._queue.push({uuid:s.uuid(),category:t,action:e,label:n}),this._storage.set(this.queue_name,JSON.stringify(this._queue)),this._flush()}},{key:"experiment_start",value:function(t,e){return this._track(this.namespace,"".concat(t.name," | ").concat(e),"Visitors")}},{key:"goal_complete",value:function(t,e,n,r){return this._track(this.namespace,"".concat(t.name," | ").concat(e),n)}}]),e}();return e.prototype.namespace="alephbet",e.prototype.queue_name="_ga_queue",e}.call(this),t.PersistentQueueKeenAdapter=function(){var e=function(){function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.LocalStorageAdapter;o(this,e),this.client=n,this._storage=r,this._queue=JSON.parse(this._storage.get(this.queue_name)||"[]"),this._flush()}return i(e,[{key:"_remove_quuid",value:function(t){var e=this;return function(n,r){if(!n)return s.remove(e._queue,function(e){return e.properties._quuid===t}),e._storage.set(e.queue_name,JSON.stringify(e._queue))}}},{key:"_flush",value:function(){var t,e,n,r,i,o;for(o=[],e=0,r=(i=this._queue).length;e<r;e++)n=i[e],t=this._remove_quuid(n.properties._quuid),o.push(this.client.addEvent(n.experiment_name,s.omit(n.properties,"_quuid"),t));return o}},{key:"_user_uuid",value:function(t,e){return t.user_id&&e.unique?s.sha1("".concat(this.namespace,".").concat(t.name,".").concat(t.user_id)):s.uuid()}},{key:"_track",value:function(t,e,n){return s.log("Persistent Queue Keen track: ".concat(t.name,", ").concat(e,", ").concat(event)),this._queue.length>100&&this._queue.shift(),this._queue.push({experiment_name:t.name,properties:{_quuid:s.uuid(),uuid:this._user_uuid(t,n),variant:e,event:n.name}}),this._storage.set(this.queue_name,JSON.stringify(this._queue)),this._flush()}},{key:"experiment_start",value:function(t,e){return this._track(t,e,{name:"participate",unique:!0})}},{key:"goal_complete",value:function(t,e,n,r){return this._track(t,e,s.defaults({name:n},r))}}]),e}();return e.prototype.queue_name="_keen_queue",e}.call(this),t.GoogleUniversalAnalyticsAdapter=function(){var t=function(){function t(){o(this,t)}return i(t,null,[{key:"_track",value:function(t,e,n){if(s.log("Google Universal Analytics track: ".concat(t,", ").concat(e,", ").concat(n)),"function"!=typeof ga)throw new Error("ga not defined. Please make sure your Universal analytics is set up correctly");return ga("send","event",t,e,n,{nonInteraction:1})}},{key:"experiment_start",value:function(t,e){return this._track(this.namespace,"".concat(t.name," | ").concat(e),"Visitors")}},{key:"goal_complete",value:function(t,e,n,r){return this._track(this.namespace,"".concat(t.name," | ").concat(e),n)}}]),t}();return t.namespace="alephbet",t}.call(this),t.LocalStorageAdapter=function(){var t=function(){function t(){o(this,t)}return i(t,null,[{key:"set",value:function(t,e){return new a(this.namespace).set(t,e)}},{key:"get",value:function(t){return new a(this.namespace).get(t)}}]),t}();return t.namespace="alephbet",t}.call(this),t}.call(void 0),t.exports=u},function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var i,o,u;i=n(11),u=new i({namespace:null}),o=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"alephbet";!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.namespace=e,this.storage=u.get(this.namespace)||{}}var e,n,i;return e=t,(n=[{key:"set",value:function(t,e){return this.storage[t]=e,u.set(this.namespace,this.storage),e}},{key:"get",value:function(t){return this.storage[t]}}])&&r(e.prototype,n),i&&r(e,i),t}(),t.exports=o},function(t,e,n){var r;!function(){var i=function(t){return i.utils.extend({},i.plugins,(new i.Storage).init(t))};i.version="0.4.10",i.utils={extend:function(){for(var t="object"==typeof arguments[0]?arguments[0]:{},e=1;e<arguments.length;e++)if(arguments[e]&&"object"==typeof arguments[e])for(var n in arguments[e])t[n]=arguments[e][n];return t},each:function(t,e,n){if(this.isArray(t)){for(var r=0;r<t.length;r++)if(!1===e.call(n,t[r],r))return}else if(t)for(var i in t)if(!1===e.call(n,t[i],i))return},tryEach:function(t,e,n,r){this.each(t,function(t,i){try{return e.call(r,t,i)}catch(e){if(this.isFunction(n))try{n.call(r,t,i,e)}catch(t){}}},this)},registerPlugin:function(t){i.plugins=this.extend(t,i.plugins)},getTypeOf:function(t){return null==t?""+t:Object.prototype.toString.call(t).replace(/^\[object\s(.*)\]$/,function(t,e){return e.toLowerCase()})}};for(var o=["Arguments","Boolean","Function","String","Array","Number","Date","RegExp","Undefined","Null"],u=0;u<o.length;u++)i.utils["is"+o[u]]=function(t){return function(e){return i.utils.getTypeOf(e)===t.toLowerCase()}}(o[u]);i.plugins={},i.options=i.utils.extend({namespace:"b45i1",storages:["local","cookie","session","memory"],expireDays:365,keyDelimiter:"."},window.Basil?window.Basil.options:{}),i.Storage=function(){var t="b45i1"+(Math.random()+1).toString(36).substring(7),e={},n=function(t){var e=i.utils.getTypeOf(t);return"string"===e&&t||"number"===e||"boolean"===e},r=function(t){return i.utils.isArray(t)?t:i.utils.isString(t)?[t]:[]},o=function(t,e,r){var o="";return n(e)?o+=e:i.utils.isArray(e)&&(o=(e=i.utils.isFunction(e.filter)?e.filter(n):e).join(r)),o&&n(t)?t+r+o:o},u=function(t,e,r){return n(t)?e.replace(new RegExp("^"+t+r),""):e},a={engine:null,check:function(){try{window[this.engine].setItem(t,!0),window[this.engine].removeItem(t)}catch(t){return!1}return!0},set:function(t,e,n){if(!t)throw Error("invalid key");window[this.engine].setItem(t,e)},get:function(t){return window[this.engine].getItem(t)},remove:function(t){window[this.engine].removeItem(t)},reset:function(t){for(var e,n=0;n<window[this.engine].length;n++)e=window[this.engine].key(n),t&&0!==e.indexOf(t)||(this.remove(e),n--)},keys:function(t,e){for(var n,r=[],i=0;i<window[this.engine].length;i++)n=window[this.engine].key(i),t&&0!==n.indexOf(t)||r.push(u(t,n,e));return r}};return e.local=i.utils.extend({},a,{engine:"localStorage"}),e.session=i.utils.extend({},a,{engine:"sessionStorage"}),e.memory={_hash:{},check:function(){return!0},set:function(t,e,n){if(!t)throw Error("invalid key");this._hash[t]=e},get:function(t){return this._hash[t]||null},remove:function(t){delete this._hash[t]},reset:function(t){for(var e in this._hash)t&&0!==e.indexOf(t)||this.remove(e)},keys:function(t,e){var n=[];for(var r in this._hash)t&&0!==r.indexOf(t)||n.push(u(t,r,e));return n}},e.cookie={check:function(e){if(!navigator.cookieEnabled)return!1;if(window.self!==window.top){var n="thirdparty.check="+Math.round(1e3*Math.random());return document.cookie=n+"; path=/",-1!==document.cookie.indexOf(n)}if(e&&e.secure)try{this.set(t,t,e);var r=this.get(t)===t;return this.remove(t),r}catch(t){return!1}return!0},set:function(t,e,n){if(!this.check())throw Error("cookies are disabled");if(n=n||{},!t)throw Error("invalid key");var r=encodeURIComponent(t)+"="+encodeURIComponent(e);if(n.expireDays){var i=new Date;i.setTime(i.getTime()+24*n.expireDays*60*60*1e3),r+="; expires="+i.toGMTString()}if(n.domain&&n.domain!==document.domain){var o=n.domain.replace(/^\./,"");if(-1===document.domain.indexOf(o)||o.split(".").length<=1)throw Error("invalid domain");r+="; domain="+n.domain}!0===n.secure&&(r+="; Secure"),document.cookie=r+"; path=/"},get:function(t){if(!this.check())throw Error("cookies are disabled");for(var e,n=encodeURIComponent(t),r=document.cookie?document.cookie.split(";"):[],i=r.length-1;i>=0;i--)if(0===(e=r[i].replace(/^\s*/,"")).indexOf(n+"="))return decodeURIComponent(e.substring(n.length+1,e.length));return null},remove:function(t){this.set(t,"",{expireDays:-1});for(var e=document.domain.split("."),n=e.length;n>1;n--)this.set(t,"",{expireDays:-1,domain:"."+e.slice(-n).join(".")})},reset:function(t){for(var e,n,r=document.cookie?document.cookie.split(";"):[],i=0;i<r.length;i++)n=(e=r[i].replace(/^\s*/,"")).substr(0,e.indexOf("=")),t&&0!==n.indexOf(t)||this.remove(n)},keys:function(t,e){if(!this.check())throw Error("cookies are disabled");for(var n,r,i=[],o=document.cookie?document.cookie.split(";"):[],a=0;a<o.length;a++)n=o[a].replace(/^\s*/,""),r=decodeURIComponent(n.substr(0,n.indexOf("="))),t&&0!==r.indexOf(t)||i.push(u(t,r,e));return i}},{init:function(t){return this.setOptions(t),this},setOptions:function(t){this.options=i.utils.extend({},this.options||i.options,t)},support:function(t){return e.hasOwnProperty(t)},check:function(t){return!!this.support(t)&&e[t].check(this.options)},set:function(t,n,u){if(u=i.utils.extend({},this.options,u),!(t=o(u.namespace,t,u.keyDelimiter)))return!1;n=!0===u.raw?n:function(t){return JSON.stringify(t)}(n);var a=null;return i.utils.tryEach(r(u.storages),function(r,i){return e[r].set(t,n,u),a=r,!1},null,this),!!a&&(i.utils.tryEach(r(u.storages),function(n,r){n!==a&&e[n].remove(t)},null,this),!0)},get:function(t,n){if(n=i.utils.extend({},this.options,n),!(t=o(n.namespace,t,n.keyDelimiter)))return null;var u=null;return i.utils.tryEach(r(n.storages),function(r,i){if(null!==u)return!1;u=e[r].get(t,n)||null,u=!0===n.raw?u:function(t){return t?JSON.parse(t):null}(u)},function(t,e,n){u=null},this),u},remove:function(t,n){n=i.utils.extend({},this.options,n),(t=o(n.namespace,t,n.keyDelimiter))&&i.utils.tryEach(r(n.storages),function(n){e[n].remove(t)},null,this)},reset:function(t){t=i.utils.extend({},this.options,t),i.utils.tryEach(r(t.storages),function(n){e[n].reset(t.namespace)},null,this)},keys:function(t){t=t||{};var e=[];for(var n in this.keysMap(t))e.push(n);return e},keysMap:function(t){t=i.utils.extend({},this.options,t);var n={};return i.utils.tryEach(r(t.storages),function(r){i.utils.each(e[r].keys(t.namespace,t.keyDelimiter),function(t){n[t]=i.utils.isArray(n[t])?n[t]:[],n[t].push(r)},this)},null,this),n}}},i.memory=(new i.Storage).init({storages:"memory",namespace:null,raw:!0}),i.cookie=(new i.Storage).init({storages:"cookie",namespace:null,raw:!0}),i.localStorage=(new i.Storage).init({storages:"local",namespace:null,raw:!0}),i.sessionStorage=(new i.Storage).init({storages:"session",namespace:null,raw:!0}),window.Basil=i,void 0===(r=function(){return i}.call(e,n,e,t))||(t.exports=r)}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,