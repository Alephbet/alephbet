!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.AlephBet=e():t.AlephBet=e()}(window,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var i,o,a,u,s;o=n(3),s=n(6),u=n(7),a=n(1),i=function(){var t=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,n,i;return e=t,i=[{key:"log",value:function(t){if(a.debug)return console.log(t)}},{key:"sha1",value:function(t){return u(t).toString()}},{key:"random",value:function(t){return t?parseInt(this.sha1(t).substr(0,13),16)/0xfffffffffffff:Math.random()}},{key:"check_weights",value:function(t){var e,n,r;for(n in e=[],t)r=t[n],e.push(null!=r.weight);return e.every(function(t){return t})}},{key:"sum_weights",value:function(t){var e,n;for(e in n=0,t)n+=t[e].weight||0;return n}},{key:"validate_weights",value:function(t){var e,n,r;for(n in e=[],t)r=t[n],e.push(null!=r.weight);return e.every(function(t){return t||e.every(function(t){return!t})})}}],(n=null)&&r(e.prototype,n),i&&r(e,i),t}();return t.defaults=o.defaults,t.keys=o.keys,t.remove=o.remove,t.omit=o.omit,t.uuid=s.v4,t}.call(void 0),t.exports=i},function(t,e,n){"use strict";t.exports={debug:!1}},function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a,u,s,c;c=n(0),u=n(9),s=n(1),a=function(){var t=function t(){o(this,t)};return t.options=s,t.utils=c,t.GimelAdapter=u.GimelAdapter,t.PersistentQueueGoogleAnalyticsAdapter=u.PersistentQueueGoogleAnalyticsAdapter,t.PersistentQueueKeenAdapter=u.PersistentQueueKeenAdapter,t.Experiment=function(){var t,e,n=function(){function n(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};o(this,n),this.options=r,c.defaults(this.options,n._options),e.call(this),this.name=this.options.name,this.variants=this.options.variants,this.user_id=this.options.user_id,this.variant_names=c.keys(this.variants),t.call(this)}return i(n,[{key:"run",value:function(){var t;return c.log("running with options: ".concat(JSON.stringify(this.options))),(t=this.get_stored_variant())?(c.log("".concat(t," active")),this.activate_variant(t)):this.conditionally_activate_variant()}},{key:"activate_variant",value:function(t){var e;return null!=(e=this.variants[t])&&e.activate(this),this.storage().set("".concat(this.options.name,":variant"),t)}},{key:"conditionally_activate_variant",value:function(){var t;if(this.options.trigger()&&(c.log("trigger set"),this.in_sample()))return c.log("in sample"),t=this.pick_variant(),this.tracking().experiment_start(this,t),this.activate_variant(t)}},{key:"goal_complete",value:function(t){var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(c.defaults(n,{unique:!0}),(!n.unique||!this.storage().get("".concat(this.options.name,":").concat(t)))&&(e=this.get_stored_variant()))return n.unique&&this.storage().set("".concat(this.options.name,":").concat(t),!0),c.log("experiment: ".concat(this.options.name," variant:").concat(e," goal:").concat(t," complete")),this.tracking().goal_complete(this,e,t,n)}},{key:"get_stored_variant",value:function(){return this.storage().get("".concat(this.options.name,":variant"))}},{key:"pick_variant",value:function(){var t;return t=c.check_weights(this.variants),c.log("all variants have weights: ".concat(t)),t?this.pick_weighted_variant():this.pick_unweighted_variant()}},{key:"pick_weighted_variant",value:function(){var t,e,n,r;for(t in r=c.sum_weights(this.variants),n=Math.ceil(this._random("variant")*r),e=this.variants)if((n-=e[t].weight)<=0)return t}},{key:"pick_unweighted_variant",value:function(){var t,e,n;return e=1/this.variant_names.length,t=Math.floor(this._random("variant")/e),n=this.variant_names[t],c.log("".concat(n," picked")),n}},{key:"in_sample",value:function(){var t;return void 0!==(t=this.storage().get("".concat(this.options.name,":in_sample")))?t:(t=this._random("sample")<=this.options.sample,this.storage().set("".concat(this.options.name,":in_sample"),t),t)}},{key:"_random",value:function(t){var e;return this.user_id?(e="".concat(this.name,".").concat(t,".").concat(this.user_id),c.random(e)):c.random()}},{key:"add_goal",value:function(t){return t.add_experiment(this)}},{key:"add_goals",value:function(t){var e,n,r,i;for(i=[],n=0,r=t.length;n<r;n++)e=t[n],i.push(this.add_goal(e));return i}},{key:"storage",value:function(){return this.options.storage_adapter}},{key:"tracking",value:function(){return this.options.tracking_adapter}}]),n}();return n._options={name:null,variants:null,user_id:null,sample:1,trigger:function(){return!0},tracking_adapter:u.GoogleUniversalAnalyticsAdapter,storage_adapter:u.LocalStorageAdapter},t=function(){return this.run()},e=function(){if(null===this.options.name)throw new Error("an experiment name must be specified");if(null===this.options.variants)throw new Error("variants must be provided");if("function"!=typeof this.options.trigger)throw new Error("trigger must be a function");if(!c.validate_weights(this.options.variants))throw new Error("not all variants have weights")},n}.call(this),t.Goal=function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};o(this,t),this.name=e,this.props=n,c.defaults(this.props,{unique:!0}),this.experiments=[]}return i(t,[{key:"add_experiment",value:function(t){return this.experiments.push(t)}},{key:"add_experiments",value:function(t){var e,n,r,i;for(i=[],n=0,r=t.length;n<r;n++)e=t[n],i.push(this.add_experiment(e));return i}},{key:"complete",value:function(){var t,e,n,r,i;for(i=[],e=0,n=(r=this.experiments).length;e<n;e++)t=r[e],i.push(t.goal_complete(this.name,this.props));return i}}]),t}(),t}.call(void 0),t.exports=a},function(t,e,n){(function(t,n){(function(){function r(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function i(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function o(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function a(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}function u(t){return function(e){return t(e)}}function s(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}function c(t){var e=Object;return function(n){return t(e(n))}}function l(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}function f(){}function h(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function p(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function v(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function g(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new v;++e<n;)this.add(t[e])}function d(t){this.size=(this.__data__=new p(t)).size}function y(t,e){var n=Pe(t),r=!n&&Be(t),i=!n&&!r&&Ie(t),o=!n&&!r&&!i&&Ue(t);if(n=n||r||i||o){r=t.length;for(var a=String,u=-1,s=Array(r);++u<r;)s[u]=a(u);r=s}else r=[];var c;a=r.length;for(c in t)!e&&!Nt.call(t,c)||n&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||L(c,a))||r.push(c);return r}function _(t,e,n){var r=t[e];Nt.call(t,e)&&X(r,n)&&(n!==dt||e in t)||b(t,e,n)}function m(t,e){for(var n=t.length;n--;)if(X(t[n][0],e))return n;return-1}function b(t,e,n){"__proto__"==e&&re?re(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function w(t,e,n,r,i,o){var a,u=1&e,s=2&e,c=4&e;if(n&&(a=i?n(t,r,i,o):n(t)),a!==dt)return a;if(!et(t))return t;if(r=Pe(t)){if(a=function(t){var e=t.length,n=new t.constructor(e);return e&&"string"==typeof t[0]&&Nt.call(t,"index")&&(n.index=t.index,n.input=t.input),n}(t),!u)return function(t,e){var n=-1,r=t.length;for(e||(e=Array(r));++n<r;)e[n]=t[n];return e}(t,a)}else{var l=Se(t),f="[object Function]"==l||"[object GeneratorFunction]"==l;if(Ie(t))return function(t,e){if(e)return t.slice();var n=t.length;n=Kt?Kt(n):new t.constructor(n);return t.copy(n),n}(t,u);if("[object Object]"==l||"[object Arguments]"==l||f&&!i){if(a=s||f?{}:"function"!=typeof t.constructor||G(t)?{}:ke(Xt(t)),!u)return s?function(t,e){return I(t,Oe(t),e)}(t,function(t,e){return t&&I(e,ct(e),t)}(a,t)):function(t,e){return I(t,Ae(t),e)}(t,function(t,e){return t&&I(e,st(e),t)}(a,t))}else{if(!Ot[l])return i?t:{};a=function(t,e,n){var r=t.constructor;switch(e){case"[object ArrayBuffer]":return P(t);case"[object Boolean]":case"[object Date]":return new r(+t);case"[object DataView]":return e=n?P(t.buffer):t.buffer,new t.constructor(e,t.byteOffset,t.byteLength);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return e=n?P(t.buffer):t.buffer,new t.constructor(e,t.byteOffset,t.length);case"[object Map]":return new r;case"[object Number]":case"[object String]":return new r(t);case"[object RegExp]":return(e=new t.constructor(t.source,jt.exec(t))).lastIndex=t.lastIndex,e;case"[object Set]":return new r;case"[object Symbol]":return we?Object(we.call(t)):{}}}(t,l,u)}}if(o||(o=new d),i=o.get(t))return i;if(o.set(t,a),ze(t))return t.forEach(function(r){a.add(w(r,e,n,r,t,o))}),a;if(Me(t))return t.forEach(function(r,i){a.set(i,w(r,e,n,i,t,o))}),a;s=c?s?D:C:s?ct:st;var h=r?dt:s(t);return function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););}(h||t,function(r,i){h&&(r=t[i=r]),_(a,i,w(r,e,n,i,t,o))}),a}function j(t,e){for(var n=0,r=(e=B(e,t)).length;null!=t&&n<r;)t=t[J(e[n++])];return n&&n==r?t:dt}function k(t,e,n){return e=e(t),Pe(t)?e:o(e,n(t))}function x(t){if(null==t)t=t===dt?"[object Undefined]":"[object Null]";else if(ne&&ne in Object(t)){var e=Nt.call(t,ne),n=t[ne];try{t[ne]=dt;var r=!0}catch(t){}var i=Ht.call(t);r&&(e?t[ne]=n:delete t[ne]),t=i}else t=Ht.call(t);return t}function A(t){return nt(t)&&"[object Arguments]"==x(t)}function O(t,e,n,r,i){if(t===e)e=!0;else if(null==t||null==e||!nt(t)&&!nt(e))e=t!=t&&e!=e;else t:{var o,a,u=Pe(t),s=Pe(e),c="[object Object]"==(o="[object Arguments]"==(o=u?"[object Array]":Se(t))?"[object Object]":o);s="[object Object]"==(a="[object Arguments]"==(a=s?"[object Array]":Se(e))?"[object Object]":a);if((a=o==a)&&Ie(t)){if(!Ie(e)){e=!1;break t}u=!0,c=!1}if(a&&!c)i||(i=new d),e=u||Ue(t)?z(t,e,n,r,O,i):U(t,e,o,n,r,O,i);else{if(!(1&n)&&(u=c&&Nt.call(t,"__wrapped__"),o=s&&Nt.call(e,"__wrapped__"),u||o)){t=u?t.value():t,e=o?e.value():e,i||(i=new d),e=O(t,e,n,r,i);break t}if(a)e:if(i||(i=new d),u=1&n,o=C(t),s=o.length,a=C(e).length,s==a||u){for(c=s;c--;){var l=o[c];if(!(u?l in e:Nt.call(e,l))){e=!1;break e}}if((a=i.get(t))&&i.get(e))e=a==e;else{a=!0,i.set(t,e),i.set(e,t);for(var f=u;++c<s;){var h=t[l=o[c]],p=e[l];if(r)var v=u?r(p,h,l,e,t,i):r(h,p,l,t,e,i);if(v===dt?h!==p&&!O(h,p,n,r,i):!v){a=!1;break}f||(f="constructor"==l)}a&&!f&&((n=t.constructor)!=(r=e.constructor)&&"constructor"in t&&"constructor"in e&&!("function"==typeof n&&n instanceof n&&"function"==typeof r&&r instanceof r)&&(a=!1)),i.delete(t),i.delete(e),e=a}}else e=!1;else e=!1}}return e}function S(t){return"function"==typeof t?t:null==t?ft:"object"==typeof t?Pe(t)?function(t,e){return N(t)&&e==e&&!et(e)?H(J(t),e):function(n){var r=at(n,t);return r===dt&&r===e?ut(n,t):O(e,r,3)}}(t[0],t[1]):function(t){var e=function(t){for(var e=st(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,i==i&&!et(i)]}return e}(t);return 1==e.length&&e[0][2]?H(e[0][0],e[0][1]):function(n){return n===t||function(t,e){var n=e.length,r=n;if(null==t)return!r;for(t=Object(t);n--;){if((i=e[n])[2]?i[1]!==t[i[0]]:!(i[0]in t))return!1}for(;++n<r;){var i,o=(i=e[n])[0],a=t[o],u=i[1];if(i[2]){if(a===dt&&!(o in t))return!1}else if(i=new d,void 0!==dt||!O(u,a,3,void 0,i))return!1}return!0}(n,e)}}(t):pt(t)}function q(t){if("string"==typeof t)return t;if(Pe(t))return i(t,q)+"";if(it(t))return je?je.call(t):"";var e=t+"";return"0"==e&&1/t==-yt?"-0":e}function E(t,e){var n;if(2>(e=B(e,t)).length)n=t;else{var r=0,i=-1,o=-1,a=(n=e).length;for(0>r&&(r=-r>a?0:a+r),0>(i=i>a?a:i)&&(i+=a),a=r>i?0:i-r>>>0,r>>>=0,i=Array(a);++o<a;)i[o]=n[o+r];n=j(t,i)}null==(t=n)||delete t[J(W(e))]}function B(t,e){return Pe(t)?t:N(t,e)?[t]:Ee(ot(t))}function P(t){var e=new t.constructor(t.byteLength);return new Wt(e).set(new Wt(t)),e}function I(t,e,n){var r=!n;n||(n={});for(var i=-1,o=e.length;++i<o;){var a=e[i],u=dt;u===dt&&(u=t[a]),r?b(n,a,u):_(n,a,u)}return n}function M(t){return rt(t)?dt:t}function z(t,e,n,r,i,o){var u=1&n,s=t.length;if(s!=(c=e.length)&&!(u&&c>s))return!1;if((c=o.get(t))&&o.get(e))return c==e;var c=-1,l=!0,f=2&n?new g:dt;for(o.set(t,e),o.set(e,t);++c<s;){var h=t[c],p=e[c];if(r)var v=u?r(p,h,c,e,t,o):r(h,p,c,t,e,o);if(v!==dt){if(v)continue;l=!1;break}if(f){if(!a(e,function(t,e){if(!f.has(e)&&(h===t||i(h,t,n,r,o)))return f.push(e)})){l=!1;break}}else if(h!==p&&!i(h,p,n,r,o)){l=!1;break}}return o.delete(t),o.delete(e),l}function U(t,e,n,r,i,o,a){switch(n){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)break;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":if(t.byteLength!=e.byteLength||!o(new Wt(t),new Wt(e)))break;return!0;case"[object Boolean]":case"[object Date]":case"[object Number]":return X(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case"[object Map]":var u=s;case"[object Set]":if(u||(u=l),t.size!=e.size&&!(1&r))break;return(n=a.get(t))?n==e:(r|=2,a.set(t,e),e=z(u(t),u(e),r,i,o,a),a.delete(t),e);case"[object Symbol]":if(we)return we.call(t)==we.call(e)}return!1}function C(t){return k(t,st,Ae)}function D(t){return k(t,ct,Oe)}function F(t,e){var n=t.__data__,r=typeof e;return("string"==r||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?n["string"==typeof e?"string":"hash"]:n.map}function R(t,e){var n=null==t?dt:t[e];return!et(n)||Gt&&Gt in n||!(Z(n)?Jt:kt).test(Q(n))?dt:n}function T(t){return Pe(t)||Be(t)||!!(ee&&t&&t[ee])}function L(t,e){var n=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==n||"symbol"!=n&&xt.test(t))&&-1<t&&0==t%1&&t<e}function N(t,e){if(Pe(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!it(t))||mt.test(t)||!_t.test(t)||null!=e&&t in Object(e)}function G(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Rt)}function H(t,e){return function(n){return null!=n&&n[t]===e&&(e!==dt||t in Object(n))}}function $(t,e,n){return e=ue(e===dt?t.length-1:e,0),function(){for(var i=arguments,o=-1,a=ue(i.length-e,0),u=Array(a);++o<a;)u[o]=i[e+o];for(o=-1,a=Array(e+1);++o<e;)a[o]=i[o];return a[e]=n(u),r(t,this,a)}}function J(t){if("string"==typeof t||it(t))return t;var e=t+"";return"0"==e&&1/t==-yt?"-0":e}function Q(t){if(null!=t){try{return Lt.call(t)}catch(t){}return t+""}return""}function V(t){return null!=t&&t.length?function t(e,n,r,i,a){var u=-1,s=e.length;for(r||(r=T),a||(a=[]);++u<s;){var c=e[u];0<n&&r(c)?1<n?t(c,n-1,r,i,a):o(a,c):i||(a[a.length]=c)}return a}(t,1):[]}function W(t){var e=null==t?0:t.length;return e?t[e-1]:dt}function K(t,e){function n(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;return o.has(i)?o.get(i):(r=t.apply(this,r),n.cache=o.set(i,r)||o,r)}if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");return n.cache=new(K.Cache||v),n}function X(t,e){return t===e||t!=t&&e!=e}function Y(t){return null!=t&&tt(t.length)&&!Z(t)}function Z(t){return!!et(t)&&("[object Function]"==(t=x(t))||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t)}function tt(t){return"number"==typeof t&&-1<t&&0==t%1&&9007199254740991>=t}function et(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function nt(t){return null!=t&&"object"==typeof t}function rt(t){return!(!nt(t)||"[object Object]"!=x(t))&&(null===(t=Xt(t))||"function"==typeof(t=Nt.call(t,"constructor")&&t.constructor)&&t instanceof t&&Lt.call(t)==$t)}function it(t){return"symbol"==typeof t||nt(t)&&"[object Symbol]"==x(t)}function ot(t){return null==t?"":q(t)}function at(t,e,n){return(t=null==t?dt:j(t,e))===dt?n:t}function ut(t,e){var n;if(n=null!=t){for(var r,i=-1,o=(r=B(e,n=t)).length,a=!1;++i<o;){var u=J(r[i]);if(!(a=null!=n&&null!=n&&u in Object(n)))break;n=n[u]}a||++i!=o?n=a:n=!!(o=null==n?0:n.length)&&tt(o)&&L(u,o)&&(Pe(n)||Be(n))}return n}function st(t){if(Y(t))t=y(t);else if(G(t)){var e,n=[];for(e in Object(t))Nt.call(t,e)&&"constructor"!=e&&n.push(e);t=n}else t=ae(t);return t}function ct(t){if(Y(t))t=y(t,!0);else if(et(t)){var e,n=G(t),r=[];for(e in t)("constructor"!=e||!n&&Nt.call(t,e))&&r.push(e);t=r}else{if(e=[],null!=t)for(n in Object(t))e.push(n);t=e}return t}function lt(t){return function(){return t}}function ft(t){return t}function ht(t){return S("function"==typeof t?t:w(t,1))}function pt(t){return N(t)?function(t){return function(e){return null==e?dt:e[t]}}(J(t)):function(t){return function(e){return j(e,t)}}(t)}function vt(){return[]}function gt(){return!1}var dt,yt=1/0,_t=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,mt=/^\w*$/,bt=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,wt=/\\(\\)?/g,jt=/\w*$/,kt=/^\[object .+?Constructor\]$/,xt=/^(?:0|[1-9]\d*)$/,At={};At["[object Float32Array]"]=At["[object Float64Array]"]=At["[object Int8Array]"]=At["[object Int16Array]"]=At["[object Int32Array]"]=At["[object Uint8Array]"]=At["[object Uint8ClampedArray]"]=At["[object Uint16Array]"]=At["[object Uint32Array]"]=!0,At["[object Arguments]"]=At["[object Array]"]=At["[object ArrayBuffer]"]=At["[object Boolean]"]=At["[object DataView]"]=At["[object Date]"]=At["[object Error]"]=At["[object Function]"]=At["[object Map]"]=At["[object Number]"]=At["[object Object]"]=At["[object RegExp]"]=At["[object Set]"]=At["[object String]"]=At["[object WeakMap]"]=!1;var Ot={};Ot["[object Arguments]"]=Ot["[object Array]"]=Ot["[object ArrayBuffer]"]=Ot["[object DataView]"]=Ot["[object Boolean]"]=Ot["[object Date]"]=Ot["[object Float32Array]"]=Ot["[object Float64Array]"]=Ot["[object Int8Array]"]=Ot["[object Int16Array]"]=Ot["[object Int32Array]"]=Ot["[object Map]"]=Ot["[object Number]"]=Ot["[object Object]"]=Ot["[object RegExp]"]=Ot["[object Set]"]=Ot["[object String]"]=Ot["[object Symbol]"]=Ot["[object Uint8Array]"]=Ot["[object Uint8ClampedArray]"]=Ot["[object Uint16Array]"]=Ot["[object Uint32Array]"]=!0,Ot["[object Error]"]=Ot["[object Function]"]=Ot["[object WeakMap]"]=!1;var St,qt="object"==typeof t&&t&&t.Object===Object&&t,Et="object"==typeof self&&self&&self.Object===Object&&self,Bt=qt||Et||Function("return this")(),Pt=e&&!e.nodeType&&e,It=Pt&&"object"==typeof n&&n&&!n.nodeType&&n,Mt=It&&It.exports===Pt,zt=Mt&&qt.process;t:{try{St=zt&&zt.binding&&zt.binding("util");break t}catch(r){}St=void 0}var Ut=St&&St.isMap,Ct=St&&St.isSet,Dt=St&&St.isTypedArray,Ft=Array.prototype,Rt=Object.prototype,Tt=Bt["__core-js_shared__"],Lt=Function.prototype.toString,Nt=Rt.hasOwnProperty,Gt=function(){var t=/[^.]+$/.exec(Tt&&Tt.keys&&Tt.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}(),Ht=Rt.toString,$t=Lt.call(Object),Jt=RegExp("^"+Lt.call(Nt).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Qt=Mt?Bt.Buffer:dt,Vt=Bt.Symbol,Wt=Bt.Uint8Array,Kt=Qt?Qt.a:dt,Xt=c(Object.getPrototypeOf),Yt=Object.create,Zt=Rt.propertyIsEnumerable,te=Ft.splice,ee=Vt?Vt.isConcatSpreadable:dt,ne=Vt?Vt.toStringTag:dt,re=function(){try{var t=R(Object,"defineProperty");return t({},"",{}),t}catch(t){}}(),ie=Object.getOwnPropertySymbols,oe=Qt?Qt.isBuffer:dt,ae=c(Object.keys),ue=Math.max,se=Date.now,ce=R(Bt,"DataView"),le=R(Bt,"Map"),fe=R(Bt,"Promise"),he=R(Bt,"Set"),pe=R(Bt,"WeakMap"),ve=R(Object,"create"),ge=Q(ce),de=Q(le),ye=Q(fe),_e=Q(he),me=Q(pe),be=Vt?Vt.prototype:dt,we=be?be.valueOf:dt,je=be?be.toString:dt,ke=function(){function t(){}return function(e){return et(e)?Yt?Yt(e):(t.prototype=e,e=new t,t.prototype=dt,e):{}}}();h.prototype.clear=function(){this.__data__=ve?ve(null):{},this.size=0},h.prototype.delete=function(t){return t=this.has(t)&&delete this.__data__[t],this.size-=t?1:0,t},h.prototype.get=function(t){var e=this.__data__;return ve?"__lodash_hash_undefined__"===(t=e[t])?dt:t:Nt.call(e,t)?e[t]:dt},h.prototype.has=function(t){var e=this.__data__;return ve?e[t]!==dt:Nt.call(e,t)},h.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=ve&&e===dt?"__lodash_hash_undefined__":e,this},p.prototype.clear=function(){this.__data__=[],this.size=0},p.prototype.delete=function(t){var e=this.__data__;return!(0>(t=m(e,t))||(t==e.length-1?e.pop():te.call(e,t,1),--this.size,0))},p.prototype.get=function(t){var e=this.__data__;return 0>(t=m(e,t))?dt:e[t][1]},p.prototype.has=function(t){return-1<m(this.__data__,t)},p.prototype.set=function(t,e){var n=this.__data__,r=m(n,t);return 0>r?(++this.size,n.push([t,e])):n[r][1]=e,this},v.prototype.clear=function(){this.size=0,this.__data__={hash:new h,map:new(le||p),string:new h}},v.prototype.delete=function(t){return t=F(this,t).delete(t),this.size-=t?1:0,t},v.prototype.get=function(t){return F(this,t).get(t)},v.prototype.has=function(t){return F(this,t).has(t)},v.prototype.set=function(t,e){var n=F(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},g.prototype.add=g.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},g.prototype.has=function(t){return this.__data__.has(t)},d.prototype.clear=function(){this.__data__=new p,this.size=0},d.prototype.delete=function(t){var e=this.__data__;return t=e.delete(t),this.size=e.size,t},d.prototype.get=function(t){return this.__data__.get(t)},d.prototype.has=function(t){return this.__data__.has(t)},d.prototype.set=function(t,e){var n=this.__data__;if(n instanceof p){var r=n.__data__;if(!le||199>r.length)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new v(r)}return n.set(t,e),this.size=n.size,this};var xe=re?function(t,e){return re(t,"toString",{configurable:!0,enumerable:!1,value:lt(e),writable:!0})}:ft,Ae=ie?function(t){return null==t?[]:(t=Object(t),function(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var a=t[n];e(a,n,t)&&(o[i++]=a)}return o}(ie(t),function(e){return Zt.call(t,e)}))}:vt,Oe=ie?function(t){for(var e=[];t;)o(e,Ae(t)),t=Xt(t);return e}:vt,Se=x;(ce&&"[object DataView]"!=Se(new ce(new ArrayBuffer(1)))||le&&"[object Map]"!=Se(new le)||fe&&"[object Promise]"!=Se(fe.resolve())||he&&"[object Set]"!=Se(new he)||pe&&"[object WeakMap]"!=Se(new pe))&&(Se=function(t){var e=x(t);if(t=(t="[object Object]"==e?t.constructor:dt)?Q(t):"")switch(t){case ge:return"[object DataView]";case de:return"[object Map]";case ye:return"[object Promise]";case _e:return"[object Set]";case me:return"[object WeakMap]"}return e});var qe=function(t){var e=0,n=0;return function(){var r=se(),i=16-(r-n);if(n=r,0<i){if(800<=++e)return arguments[0]}else e=0;return t.apply(dt,arguments)}}(xe),Ee=function(t){var e=(t=K(t,function(t){return 500===e.size&&e.clear(),t})).cache;return t}(function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(bt,function(t,n,r,i){e.push(r?i.replace(wt,"$1"):n||t)}),e});K.Cache=v;var Be=A(function(){return arguments}())?A:function(t){return nt(t)&&Nt.call(t,"callee")&&!Zt.call(t,"callee")},Pe=Array.isArray,Ie=oe||gt,Me=Ut?u(Ut):function(t){return nt(t)&&"[object Map]"==Se(t)},ze=Ct?u(Ct):function(t){return nt(t)&&"[object Set]"==Se(t)},Ue=Dt?u(Dt):function(t){return nt(t)&&tt(t.length)&&!!At[x(t)]},Ce=function(t,e){return qe($(t,void 0,ft),t+"")}(function(t,e){t=Object(t);var n,r=-1,i=e.length,o=2<i?e[2]:dt;if(n=o){n=e[0];var a=e[1];if(et(o)){var u=typeof a;n=!!("number"==u?Y(o)&&L(a,o.length):"string"==u&&a in o)&&X(o[a],n)}else n=!1}for(n&&(i=1);++r<i;)for(a=-1,u=(n=ct(o=e[r])).length;++a<u;){var s=n[a],c=t[s];(c===dt||X(c,Rt[s])&&!Nt.call(t,s))&&(t[s]=o[s])}return t}),De=function(t){return qe($(t,dt,V),t+"")}(function(t,e){var n={};if(null==t)return n;var r=!1;e=i(e,function(e){return e=B(e,t),r||(r=1<e.length),e}),I(t,D(t),n),r&&(n=w(n,7,M));for(var o=e.length;o--;)E(n,e[o]);return n});f.constant=lt,f.defaults=Ce,f.flatten=V,f.iteratee=ht,f.keys=st,f.keysIn=ct,f.memoize=K,f.omit=De,f.property=pt,f.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=function(){var t=(t=f.iteratee||ht)===ht?S:t;return arguments.length?t(arguments[0],arguments[1]):t}(e,3);++r<o;){var a=t[r];e(a,r,t)&&(n.push(a),i.push(r))}for(o=(r=t?i.length:0)-1;r--;)if(a=i[r],r==o||a!==u){var u=a;L(a)?te.call(t,a,1):E(t,a)}return n},f.eq=X,f.get=at,f.hasIn=ut,f.identity=ft,f.isArguments=Be,f.isArray=Pe,f.isArrayLike=Y,f.isBuffer=Ie,f.isFunction=Z,f.isLength=tt,f.isMap=Me,f.isObject=et,f.isObjectLike=nt,f.isPlainObject=rt,f.isSet=ze,f.isSymbol=it,f.isTypedArray=Ue,f.last=W,f.stubArray=vt,f.stubFalse=gt,f.toString=ot,f.VERSION="4.17.5",It&&((It.exports=f)._=f,Pt._=f)}).call(this)}).call(this,n(4),n(5)(t))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){var r;(function(){var i;if("function"==typeof this.require)try{var o=this.require("crypto").randomBytes;i=o&&function(){return o(16)}}catch(t){}if(!i&&this.crypto&&crypto.getRandomValues){var a=new Uint8Array(16);i=function(){return crypto.getRandomValues(a),a}}if(!i){var u=new Array(16);i=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),u[e]=t>>>((3&e)<<3)&255;return u}}for(var s="function"==typeof this.Buffer?this.Buffer:Array,c=[],l={},f=0;f<256;f++)c[f]=(f+256).toString(16).substr(1),l[c[f]]=f;function h(t,e){var n=e||0,r=c;return r[t[n++]]+r[t[n++]]+r[t[n++]]+r[t[n++]]+"-"+r[t[n++]]+r[t[n++]]+"-"+r[t[n++]]+r[t[n++]]+"-"+r[t[n++]]+r[t[n++]]+"-"+r[t[n++]]+r[t[n++]]+r[t[n++]]+r[t[n++]]+r[t[n++]]+r[t[n++]]}var p=i(),v=[1|p[0],p[1],p[2],p[3],p[4],p[5]],g=16383&(p[6]<<8|p[7]),d=0,y=0;function _(t,e,n){var r=e&&n||0;"string"==typeof t&&(e="binary"==t?new s(16):null,t=null);var o=(t=t||{}).random||(t.rng||i)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e)for(var a=0;a<16;a++)e[r+a]=o[a];return e||h(o)}var m=_;m.v1=function(t,e,n){var r=e&&n||0,i=e||[],o=null!=(t=t||{}).clockseq?t.clockseq:g,a=null!=t.msecs?t.msecs:(new Date).getTime(),u=null!=t.nsecs?t.nsecs:y+1,s=a-d+(u-y)/1e4;if(s<0&&null==t.clockseq&&(o=o+1&16383),(s<0||a>d)&&null==t.nsecs&&(u=0),u>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");d=a,y=u,g=o;var c=(1e4*(268435455&(a+=122192928e5))+u)%4294967296;i[r++]=c>>>24&255,i[r++]=c>>>16&255,i[r++]=c>>>8&255,i[r++]=255&c;var l=a/4294967296*1e4&268435455;i[r++]=l>>>8&255,i[r++]=255&l,i[r++]=l>>>24&15|16,i[r++]=l>>>16&255,i[r++]=o>>>8|128,i[r++]=255&o;for(var f=t.node||v,p=0;p<6;p++)i[r+p]=f[p];return e||h(i)},m.v4=_,m.parse=function(t,e,n){var r=e&&n||0,i=0;for(e=e||[],t.toLowerCase().replace(/[0-9a-f]{2}/g,function(t){i<16&&(e[r+i++]=l[t])});i<16;)e[r+i++]=0;return e},m.unparse=h,m.BufferClass=s,void 0===(r=function(){return m}.call(e,n,e,t))||(t.exports=r)}).call(this)},function(t,e,n){var r,i,o,a,u,s,c,l;t.exports=(l=n(8),i=(r=l).lib,o=i.WordArray,a=i.Hasher,u=r.algo,s=[],c=u.SHA1=a.extend({_doReset:function(){this._hash=new o.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var n=this._hash.words,r=n[0],i=n[1],o=n[2],a=n[3],u=n[4],c=0;c<80;c++){if(c<16)s[c]=0|t[e+c];else{var l=s[c-3]^s[c-8]^s[c-14]^s[c-16];s[c]=l<<1|l>>>31}var f=(r<<5|r>>>27)+u+s[c];f+=c<20?1518500249+(i&o|~i&a):c<40?1859775393+(i^o^a):c<60?(i&o|i&a|o&a)-1894007588:(i^o^a)-899497514,u=a,a=o,o=i<<30|i>>>2,i=r,r=f}n[0]=n[0]+r|0,n[1]=n[1]+i|0,n[2]=n[2]+o|0,n[3]=n[3]+a|0,n[4]=n[4]+u|0},_doFinalize:function(){var t=this._data,e=t.words,n=8*this._nDataBytes,r=8*t.sigBytes;return e[r>>>5]|=128<<24-r%32,e[14+(r+64>>>9<<4)]=Math.floor(n/4294967296),e[15+(r+64>>>9<<4)]=n,t.sigBytes=4*e.length,this._process(),this._hash},clone:function(){var t=a.clone.call(this);return t._hash=this._hash.clone(),t}}),r.SHA1=a._createHelper(c),r.HmacSHA1=a._createHmacHelper(c),l.SHA1)},function(t,e,n){var r;t.exports=(r=r||function(t,e){var n=Object.create||function(){function t(){}return function(e){var n;return t.prototype=e,n=new t,t.prototype=null,n}}(),r={},i=r.lib={},o=i.Base={extend:function(t){var e=n(this);return t&&e.mixIn(t),e.hasOwnProperty("init")&&this.init!==e.init||(e.init=function(){e.$super.init.apply(this,arguments)}),e.init.prototype=e,e.$super=this,e},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);t.hasOwnProperty("toString")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},a=i.WordArray=o.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:4*t.length},toString:function(t){return(t||s).stringify(this)},concat:function(t){var e=this.words,n=t.words,r=this.sigBytes,i=t.sigBytes;if(this.clamp(),r%4)for(var o=0;o<i;o++){var a=n[o>>>2]>>>24-o%4*8&255;e[r+o>>>2]|=a<<24-(r+o)%4*8}else for(o=0;o<i;o+=4)e[r+o>>>2]=n[o>>>2];return this.sigBytes+=i,this},clamp:function(){var e=this.words,n=this.sigBytes;e[n>>>2]&=4294967295<<32-n%4*8,e.length=t.ceil(n/4)},clone:function(){var t=o.clone.call(this);return t.words=this.words.slice(0),t},random:function(e){for(var n,r=[],i=function(e){e=e;var n=987654321,r=4294967295;return function(){var i=((n=36969*(65535&n)+(n>>16)&r)<<16)+(e=18e3*(65535&e)+(e>>16)&r)&r;return i/=4294967296,(i+=.5)*(t.random()>.5?1:-1)}},o=0;o<e;o+=4){var u=i(4294967296*(n||t.random()));n=987654071*u(),r.push(4294967296*u()|0)}return new a.init(r,e)}}),u=r.enc={},s=u.Hex={stringify:function(t){for(var e=t.words,n=t.sigBytes,r=[],i=0;i<n;i++){var o=e[i>>>2]>>>24-i%4*8&255;r.push((o>>>4).toString(16)),r.push((15&o).toString(16))}return r.join("")},parse:function(t){for(var e=t.length,n=[],r=0;r<e;r+=2)n[r>>>3]|=parseInt(t.substr(r,2),16)<<24-r%8*4;return new a.init(n,e/2)}},c=u.Latin1={stringify:function(t){for(var e=t.words,n=t.sigBytes,r=[],i=0;i<n;i++){var o=e[i>>>2]>>>24-i%4*8&255;r.push(String.fromCharCode(o))}return r.join("")},parse:function(t){for(var e=t.length,n=[],r=0;r<e;r++)n[r>>>2]|=(255&t.charCodeAt(r))<<24-r%4*8;return new a.init(n,e)}},l=u.Utf8={stringify:function(t){try{return decodeURIComponent(escape(c.stringify(t)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function(t){return c.parse(unescape(encodeURIComponent(t)))}},f=i.BufferedBlockAlgorithm=o.extend({reset:function(){this._data=new a.init,this._nDataBytes=0},_append:function(t){"string"==typeof t&&(t=l.parse(t)),this._data.concat(t),this._nDataBytes+=t.sigBytes},_process:function(e){var n=this._data,r=n.words,i=n.sigBytes,o=this.blockSize,u=i/(4*o),s=(u=e?t.ceil(u):t.max((0|u)-this._minBufferSize,0))*o,c=t.min(4*s,i);if(s){for(var l=0;l<s;l+=o)this._doProcessBlock(r,l);var f=r.splice(0,s);n.sigBytes-=c}return new a.init(f,c)},clone:function(){var t=o.clone.call(this);return t._data=this._data.clone(),t},_minBufferSize:0}),h=(i.Hasher=f.extend({cfg:o.extend(),init:function(t){this.cfg=this.cfg.extend(t),this.reset()},reset:function(){f.reset.call(this),this._doReset()},update:function(t){return this._append(t),this._process(),this},finalize:function(t){return t&&this._append(t),this._doFinalize()},blockSize:16,_createHelper:function(t){return function(e,n){return new t.init(n).finalize(e)}},_createHmacHelper:function(t){return function(e,n){return new h.HMAC.init(t,n).finalize(e)}}}),r.algo={});return r}(Math),r)},function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a,u,s;s=n(0),u=n(10),a=function(){var t=function t(){o(this,t)};return t.GimelAdapter=function(){var e=function(){function e(n,r){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t.LocalStorageAdapter;o(this,e),this._storage=i,this.url=n,this.namespace=r,this._queue=JSON.parse(this._storage.get(this.queue_name)||"[]"),this._flush()}return i(e,[{key:"_remove_quuid",value:function(t){var e=this;return function(n,r){if(!n)return s.remove(e._queue,function(e){return e.properties._quuid===t}),e._storage.set(e.queue_name,JSON.stringify(e._queue))}}},{key:"_jquery_get",value:function(t,e,n){return s.log("send request using jQuery"),window.jQuery.ajax({method:"GET",url:t,data:e,success:n})}},{key:"_plain_js_get",value:function(t,e,n){var r,i,o,a;return s.log("fallback on plain js xhr"),a=new XMLHttpRequest,i=(i=function(){var t;for(r in t=[],e)o=e[r],t.push("".concat(encodeURIComponent(r),"=").concat(encodeURIComponent(o)));return t}()).join("&").replace(/%20/g,"+"),a.open("GET","".concat(t,"?").concat(i)),a.onload=function(){if(200===a.status)return n()},a.send()}},{key:"_ajax_get",value:function(t,e,n){var r;return(null!=(r=window.jQuery)?r.ajax:void 0)?this._jquery_get(t,e,n):this._plain_js_get(t,e,n)}},{key:"_flush",value:function(){var t,e,n,r,i,o;for(o=[],e=0,r=(i=this._queue).length;e<r;e++)n=i[e],t=this._remove_quuid(n.properties._quuid),this._ajax_get(this.url,s.omit(n.properties,"_quuid"),t),o.push(null);return o}},{key:"_user_uuid",value:function(t,e){return t.user_id&&e.unique?s.sha1("".concat(this.namespace,".").concat(t.name,".").concat(t.user_id)):s.uuid()}},{key:"_track",value:function(t,e,n){return s.log("Persistent Queue Gimel track: ".concat(this.namespace,", ").concat(t.name,", ").concat(e,", ").concat(n.name)),this._queue.length>100&&this._queue.shift(),this._queue.push({properties:{experiment:t.name,_quuid:s.uuid(),uuid:this._user_uuid(t,n),variant:e,event:n.name,namespace:this.namespace}}),this._storage.set(this.queue_name,JSON.stringify(this._queue)),this._flush()}},{key:"experiment_start",value:function(t,e){return this._track(t,e,{name:"participate",unique:!0})}},{key:"goal_complete",value:function(t,e,n,r){return this._track(t,e,s.defaults({name:n},r))}}]),e}();return e.prototype.queue_name="_gimel_queue",e}.call(this),t.PersistentQueueGoogleAnalyticsAdapter=function(){var e=function(){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:t.LocalStorageAdapter;o(this,e),this._storage=n,this._queue=JSON.parse(this._storage.get(this.queue_name)||"[]"),this._flush()}return i(e,[{key:"_remove_uuid",value:function(t){var e=this;return function(){return s.remove(e._queue,function(e){return e.uuid===t}),e._storage.set(e.queue_name,JSON.stringify(e._queue))}}},{key:"_flush",value:function(){var t,e,n,r,i,o;if("function"!=typeof ga)throw new Error("ga not defined. Please make sure your Universal analytics is set up correctly");for(o=[],e=0,r=(i=this._queue).length;e<r;e++)n=i[e],t=this._remove_uuid(n.uuid),o.push(ga("send","event",n.category,n.action,n.label,{hitCallback:t,nonInteraction:1}));return o}},{key:"_track",value:function(t,e,n){return s.log("Persistent Queue Google Universal Analytics track: ".concat(t,", ").concat(e,", ").concat(n)),this._queue.length>100&&this._queue.shift(),this._queue.push({uuid:s.uuid(),category:t,action:e,label:n}),this._storage.set(this.queue_name,JSON.stringify(this._queue)),this._flush()}},{key:"experiment_start",value:function(t,e){return this._track(this.namespace,"".concat(t.name," | ").concat(e),"Visitors")}},{key:"goal_complete",value:function(t,e,n,r){return this._track(this.namespace,"".concat(t.name," | ").concat(e),n)}}]),e}();return e.prototype.namespace="alephbet",e.prototype.queue_name="_ga_queue",e}.call(this),t.PersistentQueueKeenAdapter=function(){var e=function(){function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t.LocalStorageAdapter;o(this,e),this.client=n,this._storage=r,this._queue=JSON.parse(this._storage.get(this.queue_name)||"[]"),this._flush()}return i(e,[{key:"_remove_quuid",value:function(t){var e=this;return function(n,r){if(!n)return s.remove(e._queue,function(e){return e.properties._quuid===t}),e._storage.set(e.queue_name,JSON.stringify(e._queue))}}},{key:"_flush",value:function(){var t,e,n,r,i,o;for(o=[],e=0,r=(i=this._queue).length;e<r;e++)n=i[e],t=this._remove_quuid(n.properties._quuid),o.push(this.client.addEvent(n.experiment_name,s.omit(n.properties,"_quuid"),t));return o}},{key:"_user_uuid",value:function(t,e){return t.user_id&&e.unique?s.sha1("".concat(this.namespace,".").concat(t.name,".").concat(t.user_id)):s.uuid()}},{key:"_track",value:function(t,e,n){return s.log("Persistent Queue Keen track: ".concat(t.name,", ").concat(e,", ").concat(event)),this._queue.length>100&&this._queue.shift(),this._queue.push({experiment_name:t.name,properties:{_quuid:s.uuid(),uuid:this._user_uuid(t,n),variant:e,event:n.name}}),this._storage.set(this.queue_name,JSON.stringify(this._queue)),this._flush()}},{key:"experiment_start",value:function(t,e){return this._track(t,e,{name:"participate",unique:!0})}},{key:"goal_complete",value:function(t,e,n,r){return this._track(t,e,s.defaults({name:n},r))}}]),e}();return e.prototype.queue_name="_keen_queue",e}.call(this),t.GoogleUniversalAnalyticsAdapter=function(){var t=function(){function t(){o(this,t)}return i(t,null,[{key:"_track",value:function(t,e,n){if(s.log("Google Universal Analytics track: ".concat(t,", ").concat(e,", ").concat(n)),"function"!=typeof ga)throw new Error("ga not defined. Please make sure your Universal analytics is set up correctly");return ga("send","event",t,e,n,{nonInteraction:1})}},{key:"experiment_start",value:function(t,e){return this._track(this.namespace,"".concat(t.name," | ").concat(e),"Visitors")}},{key:"goal_complete",value:function(t,e,n,r){return this._track(this.namespace,"".concat(t.name," | ").concat(e),n)}}]),t}();return t.namespace="alephbet",t}.call(this),t.LocalStorageAdapter=function(){var t=function(){function t(){o(this,t)}return i(t,null,[{key:"set",value:function(t,e){return new u(this.namespace).set(t,e)}},{key:"get",value:function(t){return new u(this.namespace).get(t)}}]),t}();return t.namespace="alephbet",t}.call(this),t}.call(void 0),t.exports=a},function(t,e,n){"use strict";function r(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var i,o,a;i=n(11),a=new i({namespace:null}),o=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"alephbet";!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.namespace=e,this.storage=a.get(this.namespace)||{}}var e,n,i;return e=t,(n=[{key:"set",value:function(t,e){return this.storage[t]=e,a.set(this.namespace,this.storage),e}},{key:"get",value:function(t){return this.storage[t]}}])&&r(e.prototype,n),i&&r(e,i),t}(),t.exports=o},function(t,e,n){var r;!function(){var i=function(t){return i.utils.extend({},i.plugins,(new i.Storage).init(t))};i.version="0.4.10",i.utils={extend:function(){for(var t="object"==typeof arguments[0]?arguments[0]:{},e=1;e<arguments.length;e++)if(arguments[e]&&"object"==typeof arguments[e])for(var n in arguments[e])t[n]=arguments[e][n];return t},each:function(t,e,n){if(this.isArray(t)){for(var r=0;r<t.length;r++)if(!1===e.call(n,t[r],r))return}else if(t)for(var i in t)if(!1===e.call(n,t[i],i))return},tryEach:function(t,e,n,r){this.each(t,function(t,i){try{return e.call(r,t,i)}catch(e){if(this.isFunction(n))try{n.call(r,t,i,e)}catch(t){}}},this)},registerPlugin:function(t){i.plugins=this.extend(t,i.plugins)},getTypeOf:function(t){return null==t?""+t:Object.prototype.toString.call(t).replace(/^\[object\s(.*)\]$/,function(t,e){return e.toLowerCase()})}};for(var o=["Arguments","Boolean","Function","String","Array","Number","Date","RegExp","Undefined","Null"],a=0;a<o.length;a++)i.utils["is"+o[a]]=function(t){return function(e){return i.utils.getTypeOf(e)===t.toLowerCase()}}(o[a]);i.plugins={},i.options=i.utils.extend({namespace:"b45i1",storages:["local","cookie","session","memory"],expireDays:365,keyDelimiter:"."},window.Basil?window.Basil.options:{}),i.Storage=function(){var t="b45i1"+(Math.random()+1).toString(36).substring(7),e={},n=function(t){var e=i.utils.getTypeOf(t);return"string"===e&&t||"number"===e||"boolean"===e},r=function(t){return i.utils.isArray(t)?t:i.utils.isString(t)?[t]:[]},o=function(t,e,r){var o="";return n(e)?o+=e:i.utils.isArray(e)&&(o=(e=i.utils.isFunction(e.filter)?e.filter(n):e).join(r)),o&&n(t)?t+r+o:o},a=function(t,e,r){return n(t)?e.replace(new RegExp("^"+t+r),""):e},u={engine:null,check:function(){try{window[this.engine].setItem(t,!0),window[this.engine].removeItem(t)}catch(t){return!1}return!0},set:function(t,e,n){if(!t)throw Error("invalid key");window[this.engine].setItem(t,e)},get:function(t){return window[this.engine].getItem(t)},remove:function(t){window[this.engine].removeItem(t)},reset:function(t){for(var e,n=0;n<window[this.engine].length;n++)e=window[this.engine].key(n),t&&0!==e.indexOf(t)||(this.remove(e),n--)},keys:function(t,e){for(var n,r=[],i=0;i<window[this.engine].length;i++)n=window[this.engine].key(i),t&&0!==n.indexOf(t)||r.push(a(t,n,e));return r}};return e.local=i.utils.extend({},u,{engine:"localStorage"}),e.session=i.utils.extend({},u,{engine:"sessionStorage"}),e.memory={_hash:{},check:function(){return!0},set:function(t,e,n){if(!t)throw Error("invalid key");this._hash[t]=e},get:function(t){return this._hash[t]||null},remove:function(t){delete this._hash[t]},reset:function(t){for(var e in this._hash)t&&0!==e.indexOf(t)||this.remove(e)},keys:function(t,e){var n=[];for(var r in this._hash)t&&0!==r.indexOf(t)||n.push(a(t,r,e));return n}},e.cookie={check:function(e){if(!navigator.cookieEnabled)return!1;if(window.self!==window.top){var n="thirdparty.check="+Math.round(1e3*Math.random());return document.cookie=n+"; path=/",-1!==document.cookie.indexOf(n)}if(e&&e.secure)try{this.set(t,t,e);var r=this.get(t)===t;return this.remove(t),r}catch(t){return!1}return!0},set:function(t,e,n){if(!this.check())throw Error("cookies are disabled");if(n=n||{},!t)throw Error("invalid key");var r=encodeURIComponent(t)+"="+encodeURIComponent(e);if(n.expireDays){var i=new Date;i.setTime(i.getTime()+24*n.expireDays*60*60*1e3),r+="; expires="+i.toGMTString()}if(n.domain&&n.domain!==document.domain){var o=n.domain.replace(/^\./,"");if(-1===document.domain.indexOf(o)||o.split(".").length<=1)throw Error("invalid domain");r+="; domain="+n.domain}!0===n.secure&&(r+="; Secure"),document.cookie=r+"; path=/"},get:function(t){if(!this.check())throw Error("cookies are disabled");for(var e,n=encodeURIComponent(t),r=document.cookie?document.cookie.split(";"):[],i=r.length-1;i>=0;i--)if(0===(e=r[i].replace(/^\s*/,"")).indexOf(n+"="))return decodeURIComponent(e.substring(n.length+1,e.length));return null},remove:function(t){this.set(t,"",{expireDays:-1});for(var e=document.domain.split("."),n=e.length;n>1;n--)this.set(t,"",{expireDays:-1,domain:"."+e.slice(-n).join(".")})},reset:function(t){for(var e,n,r=document.cookie?document.cookie.split(";"):[],i=0;i<r.length;i++)n=(e=r[i].replace(/^\s*/,"")).substr(0,e.indexOf("=")),t&&0!==n.indexOf(t)||this.remove(n)},keys:function(t,e){if(!this.check())throw Error("cookies are disabled");for(var n,r,i=[],o=document.cookie?document.cookie.split(";"):[],u=0;u<o.length;u++)n=o[u].replace(/^\s*/,""),r=decodeURIComponent(n.substr(0,n.indexOf("="))),t&&0!==r.indexOf(t)||i.push(a(t,r,e));return i}},{init:function(t){return this.setOptions(t),this},setOptions:function(t){this.options=i.utils.extend({},this.options||i.options,t)},support:function(t){return e.hasOwnProperty(t)},check:function(t){return!!this.support(t)&&e[t].check(this.options)},set:function(t,n,a){if(a=i.utils.extend({},this.options,a),!(t=o(a.namespace,t,a.keyDelimiter)))return!1;n=!0===a.raw?n:function(t){return JSON.stringify(t)}(n);var u=null;return i.utils.tryEach(r(a.storages),function(r,i){return e[r].set(t,n,a),u=r,!1},null,this),!!u&&(i.utils.tryEach(r(a.storages),function(n,r){n!==u&&e[n].remove(t)},null,this),!0)},get:function(t,n){if(n=i.utils.extend({},this.options,n),!(t=o(n.namespace,t,n.keyDelimiter)))return null;var a=null;return i.utils.tryEach(r(n.storages),function(r,i){if(null!==a)return!1;a=e[r].get(t,n)||null,a=!0===n.raw?a:function(t){return t?JSON.parse(t):null}(a)},function(t,e,n){a=null},this),a},remove:function(t,n){n=i.utils.extend({},this.options,n),(t=o(n.namespace,t,n.keyDelimiter))&&i.utils.tryEach(r(n.storages),function(n){e[n].remove(t)},null,this)},reset:function(t){t=i.utils.extend({},this.options,t),i.utils.tryEach(r(t.storages),function(n){e[n].reset(t.namespace)},null,this)},keys:function(t){t=t||{};var e=[];for(var n in this.keysMap(t))e.push(n);return e},keysMap:function(t){t=i.utils.extend({},this.options,t);var n={};return i.utils.tryEach(r(t.storages),function(r){i.utils.each(e[r].keys(t.namespace,t.keyDelimiter),function(t){n[t]=i.utils.isArray(n[t])?n[t]:[],n[t].push(r)},this)},null,this),n}}},i.memory=(new i.Storage).init({storages:"memory",namespace:null,raw:!0}),i.cookie=(new i.Storage).init({storages:"cookie",namespace:null,raw:!0}),i.localStorage=(new i.Storage).init({storages:"local",namespace:null,raw:!0}),i.sessionStorage=(new i.Storage).init({storages:"session",namespace:null,raw:!0}),window.Basil=i,void 0===(r=function(){return i}.call(e,n,e,t))||(t.exports=r)}()}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,